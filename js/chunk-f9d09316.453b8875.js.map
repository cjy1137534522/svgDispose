{"version":3,"sources":["webpack:///./src/components/seat_map.vue?59bc","webpack:///./src/components/seat_seat.vue?d5f0","webpack:///./node_modules/core-js/internals/whitespaces.js","webpack:///./node_modules/core-js/internals/string-trim.js","webpack:///./node_modules/core-js/internals/inherit-if-required.js","webpack:///./src/assets/seat_icon_checked_draw.svg","webpack:///./src/components/seat_map.vue?8946","webpack:///./src/components/cjy_plugin/number_input.vue?2f90","webpack:///src/components/cjy_plugin/number_input.vue","webpack:///./src/components/cjy_plugin/number_input.vue?6a38","webpack:///./src/components/cjy_plugin/number_input.vue","webpack:///src/components/seat_map.vue","webpack:///./src/components/seat_map.vue?6298","webpack:///./src/components/seat_map.vue","webpack:///./node_modules/core-js/modules/es.number.constructor.js","webpack:///./src/components/seat_seat.vue?9445","webpack:///src/components/seat_seat.vue","webpack:///./src/components/seat_seat.vue?a47b","webpack:///./src/components/seat_seat.vue","webpack:///./src/assets/seat_icon_checked.svg"],"names":["module","exports","requireObjectCoercible","whitespaces","whitespace","ltrim","RegExp","rtrim","createMethod","TYPE","$this","string","String","replace","start","end","trim","isObject","setPrototypeOf","dummy","Wrapper","NewTarget","NewTargetPrototype","constructor","prototype","render","_vm","this","_h","$createElement","_c","_self","staticClass","staticStyle","ref","attrs","directives","name","rawName","value","miniMap","expression","style","width","height","checkBox","top","left","on","$event","show","_v","_s","wheelNum","updateInputNumberVal","model","callback","$$v","wheelMaxBackUp","_n","comfrimSizeChange","class","wheelShow","domProps","svg","_l","list","idx","key","canvasItem","idxs","canvasId","hoverInfo","text","checkedShape","modifiers","target","composing","$set","$forceUpdate","orderRow","orderCol","checkedShapeSeatComfrim","checkedShapeSeatCancle","staticRenderFns","placeholder","inputModel","component","DESCRIPTORS","global","isForced","redefine","has","classof","inheritIfRequired","toPrimitive","fails","create","getOwnPropertyNames","f","getOwnPropertyDescriptor","defineProperty","NUMBER","NativeNumber","NumberPrototype","BROKEN_CLASSOF","toNumber","argument","first","third","radix","maxCode","digits","length","index","code","it","charCodeAt","NaN","slice","parseInt","NumberWrapper","arguments","valueOf","call","keys","split","j","activeTop","shapeId","cols","rows","toChangeShapeInfo","selectedSeatList","addSeat","removeSeat","cancleSeleced","activeLeft","seatCanvas","paddingLeft","hoverPinkBox","checkedRowsOrCols","hoverRowsOrCols","startCol","paddingTop","startRow","selectedBox","checkedShapeShow","checkedShapePopData"],"mappings":"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","file":"js/chunk-f9d09316.453b8875.js","sourcesContent":["import mod from \"-!../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--8-oneOf-1-0!../../node_modules/css-loader/dist/cjs.js??ref--8-oneOf-1-1!../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../node_modules/postcss-loader/src/index.js??ref--8-oneOf-1-2!../../node_modules/sass-loader/dist/cjs.js??ref--8-oneOf-1-3!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./seat_map.vue?vue&type=style&index=0&id=874862d2&lang=scss&scoped=true&\"; export default mod; export * from \"-!../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--8-oneOf-1-0!../../node_modules/css-loader/dist/cjs.js??ref--8-oneOf-1-1!../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../node_modules/postcss-loader/src/index.js??ref--8-oneOf-1-2!../../node_modules/sass-loader/dist/cjs.js??ref--8-oneOf-1-3!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./seat_map.vue?vue&type=style&index=0&id=874862d2&lang=scss&scoped=true&\"","import mod from \"-!../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--8-oneOf-1-0!../../node_modules/css-loader/dist/cjs.js??ref--8-oneOf-1-1!../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../node_modules/postcss-loader/src/index.js??ref--8-oneOf-1-2!../../node_modules/sass-loader/dist/cjs.js??ref--8-oneOf-1-3!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./seat_seat.vue?vue&type=style&index=0&id=38a8790c&lang=scss&scoped=true&\"; export default mod; export * from \"-!../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--8-oneOf-1-0!../../node_modules/css-loader/dist/cjs.js??ref--8-oneOf-1-1!../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../node_modules/postcss-loader/src/index.js??ref--8-oneOf-1-2!../../node_modules/sass-loader/dist/cjs.js??ref--8-oneOf-1-3!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./seat_seat.vue?vue&type=style&index=0&id=38a8790c&lang=scss&scoped=true&\"","// a string of all valid unicode whitespaces\n// eslint-disable-next-line max-len\nmodule.exports = '\\u0009\\u000A\\u000B\\u000C\\u000D\\u0020\\u00A0\\u1680\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200A\\u202F\\u205F\\u3000\\u2028\\u2029\\uFEFF';\n","var requireObjectCoercible = require('../internals/require-object-coercible');\nvar whitespaces = require('../internals/whitespaces');\n\nvar whitespace = '[' + whitespaces + ']';\nvar ltrim = RegExp('^' + whitespace + whitespace + '*');\nvar rtrim = RegExp(whitespace + whitespace + '*$');\n\n// `String.prototype.{ trim, trimStart, trimEnd, trimLeft, trimRight }` methods implementation\nvar createMethod = function (TYPE) {\n  return function ($this) {\n    var string = String(requireObjectCoercible($this));\n    if (TYPE & 1) string = string.replace(ltrim, '');\n    if (TYPE & 2) string = string.replace(rtrim, '');\n    return string;\n  };\n};\n\nmodule.exports = {\n  // `String.prototype.{ trimLeft, trimStart }` methods\n  // https://tc39.github.io/ecma262/#sec-string.prototype.trimstart\n  start: createMethod(1),\n  // `String.prototype.{ trimRight, trimEnd }` methods\n  // https://tc39.github.io/ecma262/#sec-string.prototype.trimend\n  end: createMethod(2),\n  // `String.prototype.trim` method\n  // https://tc39.github.io/ecma262/#sec-string.prototype.trim\n  trim: createMethod(3)\n};\n","var isObject = require('../internals/is-object');\nvar setPrototypeOf = require('../internals/object-set-prototype-of');\n\n// makes subclassing work correct for wrapped built-ins\nmodule.exports = function ($this, dummy, Wrapper) {\n  var NewTarget, NewTargetPrototype;\n  if (\n    // it can work only with native `setPrototypeOf`\n    setPrototypeOf &&\n    // we haven't completely correct pre-ES6 way for getting `new.target`, so use this\n    typeof (NewTarget = dummy.constructor) == 'function' &&\n    NewTarget !== Wrapper &&\n    isObject(NewTargetPrototype = NewTarget.prototype) &&\n    NewTargetPrototype !== Wrapper.prototype\n  ) setPrototypeOf($this, NewTargetPrototype);\n  return $this;\n};\n","module.exports = __webpack_public_path__ + \"img/seat_icon_checked_draw.9305e8b6.svg\";","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"warp\"},[_c('div',{staticStyle:{\"display\":\"none\"}},[_c('img',{ref:\"iconDraw\",attrs:{\"src\":require(\"../assets/seat_icon_checked_draw.svg\"),\"alt\":\"\",\"sizes\":\"\",\"srcset\":\"\",\"id\":\"500\"}}),_c('img',{ref:\"iconChecked\",attrs:{\"src\":require(\"../assets/seat_icon_checked.svg\"),\"alt\":\"\",\"sizes\":\"\",\"srcset\":\"\"}}),_c('img',{ref:\"iconShow\",attrs:{\"src\":require(\"../assets/seat_icon_show.svg\"),\"alt\":\"\",\"sizes\":\"\",\"srcset\":\"\",\"id\":\"500\"}})]),_c('div',{directives:[{name:\"show\",rawName:\"v-show\",value:(_vm.miniMap.show),expression:\"miniMap.show\"}],ref:\"miniMap\",staticClass:\"mini-map\",style:({width:_vm.miniMap.width+'px',height:_vm.miniMap.height+'px'})},[_c('div',{ref:\"checkBox\",staticClass:\"checkBox\",style:({width:_vm.checkBox.width+'px',height:_vm.checkBox.height+'px',top:_vm.checkBox.top+'px',left:_vm.checkBox.left+'px'})})]),_c('div',{staticClass:\"top\"},[_c('button',{on:{\"click\":function($event){_vm.miniMap.show=!_vm.miniMap.show}}},[_vm._v(\"miniMap\")]),_c('span',[_vm._v(\"调整画布大小\"+_vm._s(_vm.wheelNum))]),_c('number-input',{attrs:{\"point\":2,\"max\":99999,\"placeholder\":\"请输入金额1213\",\"input\":_vm.updateInputNumberVal},model:{value:(_vm.wheelMaxBackUp),callback:function ($$v) {_vm.wheelMaxBackUp=_vm._n($$v)},expression:\"wheelMaxBackUp\"}}),_c('button',{on:{\"click\":_vm.comfrimSizeChange}},[_vm._v(\"确认调整\")])],1),_c('div',{ref:\"content\",staticClass:\"content\"},[_c('div',{ref:\"svgWarp\",staticClass:\"svg-warp\",class:{'showCanvas':_vm.wheelNum>=_vm.wheelShow},domProps:{\"innerHTML\":_vm._s(_vm.svg)}}),_vm._l((_vm.canvasList),function(list,idx){return _c('div',{directives:[{name:\"show\",rawName:\"v-show\",value:(_vm.wheelNum>=_vm.wheelShow),expression:\"wheelNum>=wheelShow\"}],key:idx,staticClass:\"canvas-row\"},_vm._l((list),function(canvasItem,idxs){return _c('canvas',{directives:[{name:\"show\",rawName:\"v-show\",value:(canvasItem.show),expression:\"canvasItem.show\"}],key:idxs,staticClass:\"my-canvas\",style:({left:canvasItem.left+'px',top:canvasItem.top+'px'}),attrs:{\"id\":canvasItem.canvasId}},[_vm._v(\"浏览器不支持canvas\")])}),0)}),_c('div',{directives:[{name:\"show\",rawName:\"v-show\",value:(_vm.hoverInfo.show),expression:\"hoverInfo.show\"}],staticClass:\"hover-info\",style:({left:_vm.hoverInfo.left+'px',top:_vm.hoverInfo.top+'px'})},[_c('span',[_vm._v(_vm._s(_vm.hoverInfo.text))]),_c('div')])],2),_c('div',{staticClass:\"active-area\"},[_vm._v(\"active-area\")]),_c('div',{directives:[{name:\"show\",rawName:\"v-show\",value:(_vm.checkedShapeShow),expression:\"checkedShapeShow\"}],staticClass:\"pop\"},[_c('div',{staticClass:\"pop-content\"},[_c('h4',[_c('span',[_vm._v(\"行：\")]),_c('input',{directives:[{name:\"model\",rawName:\"v-model.number\",value:(_vm.checkedShape.rows),expression:\"checkedShape.rows\",modifiers:{\"number\":true}}],attrs:{\"type\":\"number\"},domProps:{\"value\":(_vm.checkedShape.rows)},on:{\"input\":function($event){if($event.target.composing){ return; }_vm.$set(_vm.checkedShape, \"rows\", _vm._n($event.target.value))},\"blur\":function($event){return _vm.$forceUpdate()}}})]),_c('h4',[_c('span',[_vm._v(\"列：\")]),_c('input',{directives:[{name:\"model\",rawName:\"v-model.number\",value:(_vm.checkedShape.cols),expression:\"checkedShape.cols\",modifiers:{\"number\":true}}],attrs:{\"type\":\"number\"},domProps:{\"value\":(_vm.checkedShape.cols)},on:{\"input\":function($event){if($event.target.composing){ return; }_vm.$set(_vm.checkedShape, \"cols\", _vm._n($event.target.value))},\"blur\":function($event){return _vm.$forceUpdate()}}})]),_c('h4',[_c('span',[_vm._v(\"排座-起始行：\")]),_c('input',{directives:[{name:\"model\",rawName:\"v-model.number\",value:(_vm.checkedShape.startRow),expression:\"checkedShape.startRow\",modifiers:{\"number\":true}}],attrs:{\"type\":\"number\"},domProps:{\"value\":(_vm.checkedShape.startRow)},on:{\"input\":function($event){if($event.target.composing){ return; }_vm.$set(_vm.checkedShape, \"startRow\", _vm._n($event.target.value))},\"blur\":function($event){return _vm.$forceUpdate()}}})]),_c('h4',[_c('span',[_vm._v(\"排座-起始列（座）：\")]),_c('input',{directives:[{name:\"model\",rawName:\"v-model.number\",value:(_vm.checkedShape.startCol),expression:\"checkedShape.startCol\",modifiers:{\"number\":true}}],attrs:{\"type\":\"number\"},domProps:{\"value\":(_vm.checkedShape.startCol)},on:{\"input\":function($event){if($event.target.composing){ return; }_vm.$set(_vm.checkedShape, \"startCol\", _vm._n($event.target.value))},\"blur\":function($event){return _vm.$forceUpdate()}}})]),_c('h4',[_c('span',[_vm._v(\"横向排序方向：\")]),_c('em',{staticClass:\"radio\",class:{'checked':_vm.checkedShape.orderRow==0},on:{\"click\":function($event){_vm.checkedShape.orderRow=0}}},[_vm._v(\"逆时针\")]),_c('em',{staticClass:\"radio\",class:{'checked':_vm.checkedShape.orderRow==1},on:{\"click\":function($event){_vm.checkedShape.orderRow=1}}},[_vm._v(\"顺时针\")])]),_c('h4',[_c('span',[_vm._v(\"竖直排序方向：\")]),_c('em',{staticClass:\"radio\",class:{'checked':_vm.checkedShape.orderCol==0},on:{\"click\":function($event){_vm.checkedShape.orderCol=0}}},[_vm._v(\"由里向外\")]),_c('em',{staticClass:\"radio\",class:{'checked':_vm.checkedShape.orderCol==1},on:{\"click\":function($event){_vm.checkedShape.orderCol=1}}},[_vm._v(\"由外向里\")])]),_c('h4',[_c('button',{on:{\"click\":_vm.checkedShapeSeatComfrim}},[_vm._v(\"确认\")]),_c('button',{on:{\"click\":_vm.checkedShapeSeatCancle}},[_vm._v(\"取消\")])])])])])}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('input',{directives:[{name:\"model\",rawName:\"v-model.number\",value:(_vm.inputModel),expression:\"inputModel\",modifiers:{\"number\":true}}],staticClass:\"my-number-input\",attrs:{\"type\":\"number\",\"placeholder\":_vm.placeholder},domProps:{\"value\":(_vm.inputModel)},on:{\"input\":function($event){if($event.target.composing){ return; }_vm.inputModel=_vm._n($event.target.value)},\"blur\":function($event){return _vm.$forceUpdate()}}})}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\r\n<input class=\"my-number-input\" type=\"number\" :placeholder=\"placeholder\" v-model.number=\"inputModel\">\r\n</template>\r\n<script type=\"text/ecmascript-6\">\r\nexport default {\r\n    components: {},\r\n    props: {\r\n        point: {\r\n            default: 0\r\n        },\r\n        max: Number,\r\n        placeholder: String,\r\n        value: {\r\n            default: null\r\n        },\r\n    },\r\n    computed: {\r\n        inputModel: {\r\n            get: function() {\r\n                // 父组件==>子组件 发消息\r\n                return this.value;\r\n            },\r\n            set: function(value) {\r\n\r\n                // 子组件==>父组件 发消息\r\n                let val = this.$el.value;\r\n                let len = val.length;\r\n                // console.log(val);\r\n\r\n                // 解决首位直接输入 '0开头的数字'问题\r\n                if (len == 2 && val.charAt(0) == 0 && val.charAt(1) != '.') {\r\n                    this.$el.value = val.charAt(1);\r\n                    this.setParentModeVal(this.$el.value);\r\n                    return;\r\n                }\r\n\r\n                // 解决数字键盘可以输入输入多个小数点问题\r\n                if (Math.abs(this.value) > 0 && val === '' && value === '') {\r\n                    if (this.keyDownDel) {\r\n                        this.$el.value = ''; // 正常删除\r\n                        console.log('---正常删除---' + this.value);\r\n                    } else {\r\n                        this.$el.value = this.value; // 多次输入小数点时\r\n                        console.log('---多次输入小数点---' + this.value);\r\n                    }\r\n                    this.setParentModeVal(this.$el.value);\r\n                    return;\r\n                }\r\n\r\n                // 解决开始就输入点问题\r\n                if (this.value === '' && val === '' && value === '') {\r\n                    console.log('---22aa---' + this.value);\r\n                    this.$el.value = '';\r\n                    this.setParentModeVal('');\r\n                    return;\r\n                }\r\n\r\n                // 解决保留两位小数问题\r\n                if (val) {\r\n                    let pointIndex = val.indexOf('.');\r\n                    if (this.point == 0 && len == 2 && val.charAt(pointIndex) == '.') {\r\n                        console.log('只能输入整数');\r\n                        this.$el.value = val.substr(0, pointIndex);\r\n                        this.setParentModeVal(this.$el.value);\r\n                        return;\r\n                    }\r\n                    if (pointIndex > 0 && (len - pointIndex) > (this.point + 1)) {\r\n                        console.log('只能输入' + this.point + '位小数');\r\n                        this.$el.value = val.substr(0, pointIndex + this.point + 1);\r\n                        this.setParentModeVal(this.$el.value);\r\n                        return;\r\n                    }\r\n                }\r\n\r\n                // 解决输入最大值问题\r\n                if (this.max > 0 && val > this.max) {\r\n                    // console.log('---4---')\r\n                    this.$el.value = val.substr(0, len - 1);\r\n                    this.setParentModeVal(this.$el.value);\r\n                    return;\r\n                }\r\n\r\n                this.setParentModeVal(val);\r\n                return;\r\n            }\r\n        }\r\n    },\r\n    data() {\r\n        return {\r\n            keyDownDel: false, // 判断键盘输入值\r\n        }\r\n    },\r\n    mounted() {\r\n        // 判断键盘是否是删除动作\r\n        var that = this;\r\n        window.document.onkeydown = function(event) {\r\n            let e = event || window.event || arguments.callee.caller.arguments[0];\r\n            if (e.keyCode == 8 || e.keyCode == 46) {\r\n                that.keyDownDel = true;\r\n            } else {\r\n                that.keyDownDel = false;\r\n            }\r\n\r\n        };\r\n    },\r\n    methods: {\r\n        setParentModeVal(value) {\r\n            // this.value = value;\r\n            this.$emit('input', value);\r\n        }\r\n    },\r\n}\r\n</script>\r\n","import mod from \"-!../../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js!../../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./number_input.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js!../../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./number_input.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./number_input.vue?vue&type=template&id=697e1d12&\"\nimport script from \"./number_input.vue?vue&type=script&lang=js&\"\nexport * from \"./number_input.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports","<template lang=\"pug\">\r\n.warp\r\n\tdiv(style=\"display:none;\")\r\n\t\timg( ref=\"iconDraw\" src=\"../assets/seat_icon_checked_draw.svg\" alt=\"\" sizes=\"\" srcset=\"\" id=\"500\")\r\n\t\timg( ref=\"iconChecked\" src=\"../assets/seat_icon_checked.svg\" alt=\"\" sizes=\"\" srcset=\"\")\r\n\t\timg( ref=\"iconShow\" src=\"../assets/seat_icon_show.svg\" alt=\"\" sizes=\"\" srcset=\"\" id=\"500\")\r\n\t.mini-map(ref=\"miniMap\" :style=\"{width:miniMap.width+'px',height:miniMap.height+'px'}\" v-show=\"miniMap.show\")\r\n\t\t.checkBox(ref=\"checkBox\" :style=\"{width:checkBox.width+'px',height:checkBox.height+'px',top:checkBox.top+'px',left:checkBox.left+'px'}\")\r\n\t.top\r\n\t\t//- router-link(to=\"/svg_to_canvas\") toBatch\r\n\t\t//- button(@click=\"saveAction\") save\r\n\t\tbutton(@click=\"miniMap.show=!miniMap.show\") miniMap\r\n\t\t//- button(@click=\"checkedShapeShow=true\") 修改区域座位信息\r\n\t\tspan 调整画布大小{{wheelNum}}\r\n\t\tnumber-input(:point=\"2\", :max=\"99999\" placeholder=\"请输入金额1213\" v-model.number=\"wheelMaxBackUp\" ,:input=\"updateInputNumberVal\")\r\n\t\tbutton(@click=\"comfrimSizeChange\") 确认调整\r\n\t.content(ref=\"content\")\r\n\t\t.svg-warp(ref=\"svgWarp\" v-html=\"svg\" ,:class=\"{'showCanvas':wheelNum>=wheelShow}\")\r\n\t\t.canvas-row(v-for=\"(list,idx) in canvasList\",:key=\"idx\" v-show=\"wheelNum>=wheelShow\")\r\n\t\t\tcanvas.my-canvas(v-show=\"canvasItem.show\" v-for=\"(canvasItem,idxs) in list\",:key=\"idxs\" ,:id=\"canvasItem.canvasId\",:style=\"{left:canvasItem.left+'px',top:canvasItem.top+'px'}\" ) 浏览器不支持canvas\r\n\t\t.hover-info(v-show=\"hoverInfo.show\" :style=\"{left:hoverInfo.left+'px',top:hoverInfo.top+'px'}\")\r\n\t\t\tspan {{hoverInfo.text}}\r\n\t\t\tdiv\r\n\t//- 操作区域\r\n\t.active-area active-area\r\n\t.pop(v-show=\"checkedShapeShow\")\r\n\t\t.pop-content\r\n\t\t\th4\r\n\t\t\t\tspan 行：\r\n\t\t\t\tinput(type=\"number\" v-model.number=\"checkedShape.rows\")\r\n\t\t\th4\r\n\t\t\t\tspan 列：\r\n\t\t\t\tinput(type=\"number\" v-model.number=\"checkedShape.cols\")\r\n\t\t\th4\r\n\t\t\t\tspan 排座-起始行：\r\n\t\t\t\tinput(type=\"number\" v-model.number=\"checkedShape.startRow\")\r\n\t\t\th4\r\n\t\t\t\tspan 排座-起始列（座）：\r\n\t\t\t\tinput(type=\"number\" v-model.number=\"checkedShape.startCol\")\r\n\t\t\th4\r\n\t\t\t\tspan 横向排序方向：\r\n\t\t\t\tem.radio(:class=\"{'checked':checkedShape.orderRow==0}\" @click=\"checkedShape.orderRow=0\") 逆时针\r\n\t\t\t\tem.radio(:class=\"{'checked':checkedShape.orderRow==1}\" @click=\"checkedShape.orderRow=1\") 顺时针\r\n\t\t\th4\r\n\t\t\t\tspan 竖直排序方向：\r\n\t\t\t\tem.radio( :class=\"{'checked':checkedShape.orderCol==0}\" @click=\"checkedShape.orderCol=0\") 由里向外\r\n\t\t\t\tem.radio( :class=\"{'checked':checkedShape.orderCol==1}\" @click=\"checkedShape.orderCol=1\") 由外向里\r\n\t\t\th4\r\n\t\t\t\tbutton(@click=\"checkedShapeSeatComfrim\") 确认\r\n\t\t\t\tbutton(@click=\"checkedShapeSeatCancle\") 取消\r\n</template>\r\n\r\n<script>\r\n// @ is an alias to /src\r\nimport NumberInput from '@/components/cjy_plugin/number_input';\r\nimport TOOLS from '@/utils/tools.js'\r\nimport COMMON from '@/utils/common.js'\r\nlet _this = null,\r\n    contentWarp = null,\r\n    svgWarp = null,\r\n    svgDom = null;\r\nexport default {\r\n    name: \"\",\r\n    components: {\r\n        NumberInput\r\n    },\r\n    data() {\r\n        return {\r\n            pageVisible: true,\r\n            errorRange: 50,\r\n\r\n            hoverInfo: {\r\n                show: true,\r\n                text: \"3213\",\r\n                top: 0,\r\n                left: 0\r\n            },\r\n\r\n            //切割成多少个canvas\r\n            canvasSplit: {\r\n                row: 7,\r\n                col: 7\r\n            },\r\n\r\n            canvasList: [], //二维数组\r\n\r\n\r\n            wheelMaxBackUp: 0, //调整整个画布大小时候调用\r\n            wheelMax: 1, //最大缩放值\r\n            scaleMax: 1.5,\r\n\r\n            wheelNum: 0, //当前缩放值\r\n            wheelMin: 0, //最小缩放值\r\n\r\n            center: {\r\n                find: false,\r\n                x: 0,\r\n                y: 0\r\n            },\r\n            canvas: {\r\n                left: 0,\r\n                top: 0\r\n            },\r\n\r\n            svg: \"\",\r\n            checkedSvg: \"\",\r\n\r\n            maxWidth: 0,\r\n            maxHeight: 0,\r\n            setWidth: 0,\r\n            setHeight: 0,\r\n\r\n            position: {\r\n                left: 0,\r\n                top: 0\r\n            },\r\n            cont: {\r\n                width: 0,\r\n                height: 0,\r\n                offsetLeft: 0,\r\n                offsetTop: 0,\r\n                center: []\r\n            },\r\n            miniMap: {\r\n                show: true,\r\n                width: 0,\r\n                height: 0\r\n            },\r\n            checkBox: {\r\n                width: 0,\r\n                height: 0,\r\n                top: 0,\r\n                left: 0,\r\n            },\r\n\r\n            seatIcon: { //座位图标\r\n                iconShow: \"\",\r\n                iconChecked: \"\",\r\n                iconDraw: \"\",\r\n                width: 0,\r\n                height: 0,\r\n                marginRight: 0,\r\n                marginBottom: 0,\r\n                diagonalLine: 0, //正方形对角线的长度\r\n                realWidth: 25,\r\n                realHeight: 25,\r\n                realMarginRight: 8,\r\n                realMarginBottom: 8\r\n            },\r\n\r\n            checkedShapeShow: false,\r\n            checkedShape: {\r\n                shapeId: null,\r\n                rows: 0,\r\n                cols: 0,\r\n                startRow: 0, //排座的开始行\r\n                startCol: 0, //排座的开始列（座）\r\n                orderRow: 0, //横向排序方向：0：逆时针  1：反向\r\n                orderCol: 0 //纵向排序方向：0：从里向外  1：反向\r\n                // seats:[]\r\n            },\r\n\r\n            shapeList: [\r\n                // {\r\n                //     cenPoint:[0,0],\r\n                //     angle:0,\r\n                //     shapeId:0,\r\n                //     rows:10,\r\n                //     cols:10,\r\n                //     startRow:2,//排座的开始行\r\n                //     startCol:2,//排座的开始列（座）\r\n                //     seats:[\r\n                //        [ {seatId:0,status:0,ticketLevel:0},{seatId:2,status:0,ticketLevel:0}],\r\n                //        [ {seatId:7,status:0,ticketLevel:0},{seatId:5,status:0,ticketLevel:0}],\r\n                //        [ {seatId:6,status:0,ticketLevel:0},{seatId:4,status:0,ticketLevel:0}]\r\n                //     ]\r\n                // }\r\n            ],\r\n            renderList: [], //已经渲染的shape\r\n            viewBoxList: [], //当前可视区域内的shape\r\n            checkedSeatList: [], //选中的座位\r\n        };\r\n    },\r\n    computed: {\r\n        wheelPow: function() {\r\n            let pow = this.wheelNum * this.scaleMax;\r\n            return pow\r\n        },\r\n        wheelShow() { //展示具体绘制座位的最小缩放值\r\n            return Math.floor(this.wheelMax * 0.6 * 100) / 100;\r\n        },\r\n        wheelRadio() { //当前缩放值和最大缩放值的比例\r\n            let radio = this.wheelNum / this.wheelMax;\r\n            return this.wheelNum / this.wheelMax;\r\n        }\r\n    },\r\n    watch: {\r\n        position: {\r\n            handler(newVal) {\r\n                svgWarp.style.left = newVal.left + 'px';\r\n                svgWarp.style.top = newVal.top + 'px';\r\n                if (this.wheelNum < this.wheelShow) return false;\r\n                this.canvasList.forEach((list, row) => {\r\n                    list.forEach((item, col) => {\r\n                        item.left = newVal.left + col * item.width\r\n                        item.top = newVal.top + row * item.height\r\n                    })\r\n                })\r\n            },\r\n            deep: true\r\n        },\r\n        viewBoxList: {\r\n            handler(list, oldList) {\r\n                //判断当前需要显示的canvas\r\n                for (let row = 0; row < this.canvasSplit.row; row++) {\r\n                    let rowList = this.canvasList[row];\r\n                    for (let col = 0; col < this.canvasSplit.col; col++) {\r\n                        let canvasItem = this.canvasList[row][col];\r\n                        //因为现在只有两个，所以高度是相同的，只需要判断宽度\r\n                        let s_x = canvasItem.width * col - this.errorRange;\r\n                        let e_x = canvasItem.width * (col + 1) + this.errorRange;\r\n                        let s_y = canvasItem.height * row - this.errorRange;\r\n                        let e_y = canvasItem.height * (row + 1) + this.errorRange;\r\n                        let isIn = false;\r\n                        list.forEach(shape => {\r\n                            let center = [shape.cenPoint[0], shape.cenPoint[1]];\r\n                            let angle = shape.angle;\r\n                            let width = (this.seatIcon.width + this.seatIcon.marginRight) * shape.cols - this.seatIcon.marginRight;\r\n                            let height = (this.seatIcon.height + this.seatIcon.marginBottom) * shape.rows - this.seatIcon.marginBottom;\r\n                            //计算出实际坐标\r\n                            let point1 = [center[0] - width / 2, center[1] - height / 2];\r\n                            let point2 = [center[0] + width / 2, center[1] - height / 2];\r\n                            let point3 = [center[0] + width / 2, center[1] + height / 2];\r\n                            let point4 = [center[0] - width / 2, center[1] + height / 2];\r\n                            let rangeCenter = [center[0] * this.wheelPow, center[1] * this.wheelPow]\r\n                            let rangePoints = [\r\n                                [point1[0] * this.wheelPow, point1[1] * this.wheelPow],\r\n                                [point2[0] * this.wheelPow, point2[1] * this.wheelPow],\r\n                                [point3[0] * this.wheelPow, point3[1] * this.wheelPow],\r\n                                [point4[0] * this.wheelPow, point4[1] * this.wheelPow]\r\n                            ]\r\n                            //首先判断shape属于哪个canvas\r\n                            if (rangeCenter[0] >= s_x && rangeCenter[0] <= e_x && rangeCenter[1] >= s_y && rangeCenter[1] <= e_y) {\r\n                                isIn = true;\r\n                            } else {\r\n                                for (let k = 0; k < 4; k++) {\r\n                                    let rangePoint = rangePoints[k];\r\n                                    if (rangePoint[0] >= s_x && rangePoint[0] <= e_x && rangePoint[1] >= s_y && rangePoint[1] <= e_y) {\r\n                                        isIn = true;\r\n                                        break;\r\n                                    }\r\n                                }\r\n                            }\r\n                            if (isIn) {\r\n                                canvasItem.show = true\r\n                            } else {\r\n                                canvasItem.show = false\r\n                            }\r\n                        })\r\n                    }\r\n                }\r\n\r\n            },\r\n            deep: true\r\n        }\r\n    },\r\n    created() {\r\n        _this = this;\r\n        if (localStorage.getItem(\"shapeList\")) {\r\n            this.shapeList = JSON.parse(localStorage.getItem(\"shapeList\"));\r\n        }\r\n        if (localStorage.getItem(\"scaleMax\")) {\r\n            this.scaleMax = parseFloat(localStorage.getItem(\"scaleMax\"))\r\n        }\r\n        this.wheelMaxBackUp = this.scaleMax;\r\n        this.calcSeatIconBaseData(this.scaleMax)\r\n    },\r\n    mounted() {\r\n        //座位图标初始化\r\n        this.svg = _svg;\r\n        this.$nextTick(() => {\r\n            this.svgInit();\r\n            this.seatIconInit();\r\n        });\r\n    },\r\n    beforeDestroy() {\r\n\r\n    },\r\n    methods: {\r\n        updateInputNumberVal(number) { //input_number组件更新数据\r\n            this.wheelMaxBackUp = number;\r\n        },\r\n        calcSeatIconBaseData(scaleMax) { //根据sclaeMax计算基础\r\n            this.seatIcon.width = this.seatIcon.realWidth / scaleMax\r\n            this.seatIcon.height = this.seatIcon.realHeight / scaleMax\r\n            this.seatIcon.marginRight = this.seatIcon.realMarginRight / scaleMax\r\n            this.seatIcon.marginBottom = this.seatIcon.realMarginBottom / scaleMax\r\n            //计算出正方形对角线的长度\r\n            this.seatIcon.diagonalLine = Math.pow((this.seatIcon.width / 2) * (this.seatIcon.width / 2) * 2, 0.5);\r\n        },\r\n        calcSvgCanvasBaseData(scaleMax) {\r\n            //缩放基础数据计算\r\n            this.maxWidth = this.center.x * 2 * scaleMax;\r\n            this.maxHeight = this.center.y * 2 * scaleMax;\r\n            this.wheelMin = this.floatTwo(this.cont.width / this.maxWidth);\r\n            //canvas的最大尽量接近2000*2000\r\n            this.canvasSplit.col = Math.ceil(this.maxWidth / 2000)\r\n            this.canvasSplit.row = Math.ceil(this.maxHeight / 2000)\r\n            this.canvasInit()\r\n        },\r\n        comfrimSizeChange() { //确认修改画布大小\r\n            if (this.checkedShape.shapeId === null) {\r\n                alert(\"请先双击选择需要观察的图形\");\r\n                return false;\r\n            }\r\n            this.scaleMax = this.wheelMaxBackUp;\r\n            //保存数据\r\n            localStorage.setItem(\"scaleMax\", this.scaleMax);\r\n\r\n            this.calcSeatIconBaseData(this.scaleMax)\r\n            this.calcSvgCanvasBaseData(this.scaleMax)\r\n\r\n            this.$nextTick(() => this.clickToMax(this.checkedShape, this.wheelNum < this.wheelShow ? this.wheelShow : this.wheelNum))\r\n\r\n        },\r\n        canvasInit() { //根据切割canvas的行和列计算出canvas有多少个\r\n            this.canvasList = []\r\n            let tmpList = []\r\n            let obj = {\r\n                dom: null,\r\n                ctx: null,\r\n                width: 0,\r\n                height: 0,\r\n                left: 0,\r\n                top: 0,\r\n                show: false\r\n            }\r\n            let canvasId = 1\r\n            for (let i = 0; i < this.canvasSplit.row; i++) {\r\n                let rowList = []\r\n                for (let j = 0; j < this.canvasSplit.col; j++) {\r\n                    rowList.push({\r\n                        ...obj,\r\n                        canvasId\r\n                    })\r\n                    canvasId++;\r\n                }\r\n                tmpList.push(rowList)\r\n            }\r\n            this.canvasList = tmpList;\r\n            //获取canvasDom\r\n            this.$nextTick(() => {\r\n                let canvasList = document.getElementsByTagName(\"canvas\");\r\n                this.canvasList.forEach((rowList, row) => {\r\n                    rowList.forEach((canvasItem, col) => {\r\n                        canvasItem.dom = canvasList[this.canvasSplit.col * row + col]\r\n                        canvasItem.ctx = canvasList[this.canvasSplit.col * row + col].getContext(\"2d\");\r\n                    })\r\n                })\r\n            })\r\n        },\r\n        checkOnSeat(shape, clickPoint) { //判断是否点击在座位上,返回座位信息的横纵下标\r\n            //因为clickPoint是真实坐标，所以需要把shape的数据转算成真实的\r\n            let center = [shape.cenPoint[0] * this.wheelPow, shape.cenPoint[1] * this.wheelPow];\r\n\r\n            //座位起始坐标计算,真事单位\r\n            let width = ((this.seatIcon.width + this.seatIcon.marginRight) * shape.cols - this.seatIcon.marginRight) * this.wheelPow;\r\n            let height = ((this.seatIcon.height + this.seatIcon.marginBottom) * shape.rows - this.seatIcon.marginBottom) * this.wheelPow;\r\n            let point1 = [center[0] - width / 2, center[1] - height / 2];\r\n            // document.getElementById(\"212\").setAttribute(\"cx\", point1[0] / this.wheelPow)\r\n            // document.getElementById(\"212\").setAttribute(\"cy\", point1[1] / this.wheelPow)\r\n            //判断是否点击在座位上,使用每个座位的中心点到clickPoint之间的距离判断\r\n            let seat = [];\r\n            for (let i = 0; i < shape.cols; i++) {\r\n                let cen_x = point1[0] + (i * (this.seatIcon.width + this.seatIcon.marginRight) + this.seatIcon.width / 2) * this.wheelPow;\r\n                for (let j = 0; j < shape.rows; j++) {\r\n                    let cen_y = point1[1] + (j * (this.seatIcon.height + this.seatIcon.marginBottom) + this.seatIcon.height / 2) * this.wheelPow;\r\n                    let rotatePoint = TOOLS.rotatePoint(center, [cen_x, cen_y], -shape.angle);\r\n                    let distance = TOOLS.getDisance1(rotatePoint, clickPoint);\r\n                    if (distance < this.seatIcon.diagonalLine * this.wheelPow) {\r\n                        seat = [j, i];\r\n                        break;\r\n                    }\r\n                    if (seat.length != 0) break;\r\n                }\r\n            }\r\n            return seat;\r\n        },\r\n        svgInit() {\r\n            svgWarp = this.$refs.svgWarp;\r\n            svgDom = svgWarp.firstElementChild;\r\n            // 获取到shapeList的所有shapeId集合\r\n            let shapeIds = this.shapeList.map(item => item.shapeId);\r\n            // console.log(shapeIds)\r\n            //给元素设定id\r\n            let domList = svgDom.childNodes;\r\n            let id_num = 0;\r\n            domList.forEach(item => {\r\n                /* 元素节点\t1,属性节点\t2,文本节点\t3,注释节点（comment）\t8,document\t9,DocumentFragment\t11 */\r\n                if (item.nodeType == 1 && item.nodeName != \"text\" && item.nodeName != \"title\") {\r\n                    let curId = ++id_num;\r\n                    item.setAttribute(\"id\", curId);\r\n                    let findIdx = shapeIds.indexOf(curId + \"\");\r\n                    if (findIdx != -1) {\r\n                        if (this.shapeList[findIdx].rows > 0 && this.shapeList[findIdx].cols > 0) {\r\n                            item.style.fill = \"rgba(255, 192, 203, 0.74)\";\r\n                        }\r\n                    }\r\n                }\r\n            })\r\n\r\n            //给shape绑定选中事件\r\n            // svgDom.addEventListener(\"click\", _this.shapeCheckedAction)\r\n            // svgDom.addEventListener(\"dblclick\", _this.shapeCheckedAction)\r\n            // svgDom.addEventListener(\"click\", _this.seatCheckedAction)\r\n\r\n            let viewBox = svgDom.getAttribute(\"viewBox\").split(\" \")\r\n            this.center = {\r\n                find: true,\r\n                x: parseFloat(viewBox[2]) / 2,\r\n                y: parseFloat(viewBox[3]) / 2\r\n            }\r\n            //根据宽高比计算出content的高度\r\n            this.warpInit();\r\n            this.calcSvgCanvasBaseData(this.scaleMax)\r\n            //根据内容框缩放到合适的大小\r\n            this.setSvgAndCanvas(this.wheelMin);\r\n            this.setCheckBox();\r\n\r\n            document.getElementById(\"210\").setAttribute(\"cx\", this.center.x)\r\n            document.getElementById(\"210\").setAttribute(\"cy\", this.center.y)\r\n        },\r\n        clickToMax(shape, wheelVal) { //点击放大\r\n            this.setSvgAndCanvas(wheelVal);\r\n            let cenPoint = shape.cenPoint;\r\n            // let left = cenPoint[0] * this.wheelPow - this.cont.width / 2;\r\n            // let top = cenPoint[1] * this.wheelPow - this.cont.height / 2;\r\n            let left = cenPoint[0] * this.wheelPow - this.cont.width / 2;\r\n            let top = cenPoint[1] * this.wheelPow - this.cont.height / 2;\r\n\r\n            let position = {\r\n                top: -1 * top,\r\n                left: -1 * left\r\n            }\r\n            this.positionCheck(position)\r\n            this.setCheckBox();\r\n        },\r\n        updateShapeSeatStatus(shape, seats) { //更新shape里单个座位的状态渲染信息\r\n            //shape 表明是哪个区域\r\n            //seats 是座位的座位下标，传数组，因为后面要实现批量选座\r\n            // console.log(seats)\r\n            //center 是svg虚拟单位值\r\n            let center = [shape.cenPoint[0], shape.cenPoint[1]];\r\n            let angle = shape.angle;\r\n            let width = ((this.seatIcon.width + this.seatIcon.marginRight) * shape.cols - this.seatIcon.marginRight) * this.wheelPow;\r\n            let height = ((this.seatIcon.height + this.seatIcon.marginBottom) * shape.rows - this.seatIcon.marginBottom) * this.wheelPow;\r\n            //计算出实际坐标 svg一比一\r\n            let point1 = [center[0] * this.wheelPow - width / 2, center[1] * this.wheelPow - height / 2];\r\n            let point2 = [center[0] * this.wheelPow + width / 2, center[1] * this.wheelPow - height / 2];\r\n            let point3 = [center[0] * this.wheelPow + width / 2, center[1] * this.wheelPow + height / 2];\r\n            let point4 = [center[0] * this.wheelPow - width / 2, center[1] * this.wheelPow + height / 2];\r\n            let rangeCenter = [center[0] * this.wheelPow, center[1] * this.wheelPow]\r\n            let rangePoints = [\r\n                [point1[0], point1[1]],\r\n                [point2[0], point2[1]],\r\n                [point3[0], point3[1]],\r\n                [point4[0], point4[1]]\r\n            ]\r\n            //首先判断shape属于哪个canvas\r\n            let drawCanvas = [];\r\n            for (let row = 0; row < this.canvasSplit.row; row++) {\r\n                let rowList = this.canvasList[row];\r\n                for (let col = 0; col < this.canvasSplit.col; col++) {\r\n                    let canvasItem = this.canvasList[row][col];\r\n                    //因为现在只有两个，所以高度是相同的，只需要判断宽度\r\n                    let s_x = canvasItem.width * col - this.errorRange;\r\n                    let e_x = canvasItem.width * (col + 1) + this.errorRange;\r\n                    let s_y = canvasItem.height * row - this.errorRange;\r\n                    let e_y = canvasItem.height * (row + 1) + this.errorRange;\r\n                    if (rangeCenter[0] >= s_x && rangeCenter[0] <= e_x && rangeCenter[1] >= s_y && rangeCenter[1] <= e_y) {\r\n                        drawCanvas.push({\r\n                            col,\r\n                            row,\r\n                            ...canvasItem\r\n                        })\r\n                        continue;\r\n                    }\r\n                    for (let k = 0; k < rangePoints.length; k++) {\r\n                        let rangePoint = rangePoints[k];\r\n                        if (rangePoint[0] >= s_x && rangePoint[0] <= e_x && rangePoint[1] >= s_y && rangePoint[1] <= e_y) {\r\n                            drawCanvas.push({\r\n                                col,\r\n                                row,\r\n                                ...canvasItem\r\n                            })\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            drawCanvas.forEach(canvasItem => {\r\n                canvasItem.ctx.save();\r\n                let tanr_x = rangeCenter[0] - (canvasItem.col * canvasItem.width);\r\n                let tanr_y = rangeCenter[1] - (canvasItem.row * canvasItem.height);\r\n                canvasItem.ctx.translate(tanr_x, tanr_y);\r\n                canvasItem.ctx.rotate(angle * Math.PI / 180);\r\n                canvasItem.ctx.translate(-tanr_x, -tanr_y);\r\n\r\n                seats.forEach(seat => {\r\n                    let j = seat[0],\r\n                        i = seat[1];\r\n                    let x = point1[0] + i * (this.seatIcon.width + this.seatIcon.marginRight) * this.wheelPow;\r\n                    let y = point1[1] + j * (this.seatIcon.height + this.seatIcon.marginBottom) * this.wheelPow;\r\n                    let real_x = x - (canvasItem.col * canvasItem.width);\r\n                    let real_y = y - (canvasItem.row * canvasItem.height);\r\n                    if (shape.seats[j][i].status == 0) {\r\n                        canvasItem.ctx.beginPath();\r\n                        canvasItem.ctx.drawImage(this.seatIcon.iconShow, real_x, real_y, this.seatIcon.width * this.wheelPow, this.seatIcon.height * this.wheelPow);\r\n                    } else if (shape.seats[j][i].status == 1) {\r\n                        canvasItem.ctx.beginPath();\r\n                        canvasItem.ctx.drawImage(this.seatIcon.iconChecked, real_x, real_y, this.seatIcon.width * this.wheelPow, this.seatIcon.height * this.wheelPow);\r\n                        canvasItem.ctx.drawImage(this.seatIcon.iconDraw, real_x, real_y, this.seatIcon.width * this.wheelPow, this.seatIcon.height * this.wheelPow);\r\n\r\n                        // canvasItem.ctx.beginPath();\r\n                        // canvasItem.ctx.restore();\r\n                        // let half = (this.seatIcon.width + this.seatIcon.marginRight) * this.wheelPow / 2\r\n                        // let total = (this.seatIcon.width + this.seatIcon.marginRight) * this.wheelPow\r\n                        // let draw_x = real_x + half;\r\n                        // let draw_y = real_y + half;\r\n                        // let rotatePoint = TOOLS.rotatePoint([tanr_x, tanr_y], [real_x, real_y], -shape.angle);\r\n                        // let mathC = Math.sin(-shape.angle * Math.PI / 180)\r\n                        // console.log(mathC)\r\n                        // canvasItem.ctx.drawImage(this.seatIcon.iconDraw,\r\n                        //     // real_x,\r\n                        //     // real_y,\r\n                        //     rotatePoint[0] - total * mathC,\r\n                        //     rotatePoint[1] - total * mathC,\r\n                        //     // rotatePoint[0],\r\n                        //     // rotatePoint[1],\r\n                        //     this.seatIcon.width * this.wheelPow, this.seatIcon.height * this.wheelPow);\r\n                    }\r\n                })\r\n                canvasItem.ctx.restore();\r\n            })\r\n        },\r\n        drawOneShapeSeat(shape, originShape = false) { //绘制单个区域座位\r\n            // console.log(\"drawOneShapeSeat..\", shape.shapeId)\r\n            // console.log(shape, this.seatIcon.width * this.wheelPow)\r\n            //center 是svg虚拟单位值\r\n            let center = [shape.cenPoint[0], shape.cenPoint[1]];\r\n            let angle = shape.angle;\r\n            // 有这个区域的上一个状态值就说明，是重绘当前区域\r\n            if (originShape) {\r\n                if (shape.cols == originShape.cols && shape.rows == originShape.rows) {\r\n                    //没有改变行和列，就不清空了\r\n                } else {\r\n                    let orgWidth = (this.seatIcon.width + this.seatIcon.marginRight) * originShape.cols - this.seatIcon.marginRight;\r\n                    let orgHeight = (this.seatIcon.height + this.seatIcon.marginBottom) * originShape.rows - this.seatIcon.marginBottom;\r\n                    let point1 = [center[0] - orgWidth / 2, center[1] - orgHeight / 2];\r\n                    let point2 = [center[0] + orgWidth / 2, center[1] - orgHeight / 2];\r\n                    let point3 = [center[0] + orgWidth / 2, center[1] + orgHeight / 2];\r\n                    let point4 = [center[0] - orgWidth / 2, center[1] + orgHeight / 2];\r\n                    let rangePoints = [\r\n                        [point1[0] * this.wheelPow, point1[1] * this.wheelPow],\r\n                        [point2[0] * this.wheelPow, point2[1] * this.wheelPow],\r\n                        [point3[0] * this.wheelPow, point3[1] * this.wheelPow],\r\n                        [point4[0] * this.wheelPow, point4[1] * this.wheelPow]\r\n                    ]\r\n                    //首先判断shape属于哪个canvas\r\n                    let drawCanvas = [];\r\n                    this.canvasList.forEach((rowList, row) => {\r\n                        rowList.forEach((canvasItem, col) => {\r\n                            //因为现在只有两个，所以高度是相同的，只需要判断宽度\r\n                            let s_x = canvasItem.width * col - this.errorRange;\r\n                            let e_x = canvasItem.width * (col + 1) + this.errorRange;\r\n                            let s_y = canvasItem.height * row - this.errorRange;\r\n                            let e_y = canvasItem.height * (row + 1) + this.errorRange;\r\n                            for (let k = 0; k < 4; k++) {\r\n                                let rangePoint = rangePoints[k];\r\n                                if (rangePoint[0] >= s_x && rangePoint[0] <= e_x && rangePoint[1] >= s_y && rangePoint[1] <= e_y) {\r\n                                    drawCanvas.push({\r\n                                        col,\r\n                                        row,\r\n                                        ...canvasItem\r\n                                    })\r\n                                    break;\r\n                                }\r\n                            }\r\n                        })\r\n                    })\r\n\r\n                    //重绘需要清除canvas原始这个区域的数据\r\n                    drawCanvas.forEach(canvasItem => {\r\n                        canvasItem.ctx.save();\r\n                        canvasItem.ctx.translate(center[0] * this.wheelPow - (canvasItem.col * canvasItem.width), center[1] * this.wheelPow - (canvasItem.row * canvasItem.height));\r\n                        canvasItem.ctx.rotate(angle * Math.PI / 180);\r\n                        canvasItem.ctx.translate(-(center[0] * this.wheelPow - (canvasItem.col * canvasItem.width)), -(center[1] * this.wheelPow - (canvasItem.row * canvasItem.height)));\r\n\r\n                        canvasItem.ctx.clearRect(point1[0] * this.wheelPow - (canvasItem.col * canvasItem.width), point1[1] * this.wheelPow - (canvasItem.row * canvasItem.height), orgWidth * this.wheelPow, orgHeight * this.wheelPow);\r\n\r\n                        canvasItem.ctx.restore();\r\n                    })\r\n\r\n                }\r\n            }\r\n\r\n            let width = ((this.seatIcon.width + this.seatIcon.marginRight) * shape.cols - this.seatIcon.marginRight) * this.wheelPow;\r\n            let height = ((this.seatIcon.height + this.seatIcon.marginBottom) * shape.rows - this.seatIcon.marginBottom) * this.wheelPow;\r\n            //计算出实际坐标\r\n            let point1 = [center[0] * this.wheelPow - width / 2, center[1] * this.wheelPow - height / 2];\r\n            let point2 = [center[0] * this.wheelPow + width / 2, center[1] * this.wheelPow - height / 2];\r\n            let point3 = [center[0] * this.wheelPow + width / 2, center[1] * this.wheelPow + height / 2];\r\n            let point4 = [center[0] * this.wheelPow - width / 2, center[1] * this.wheelPow + height / 2];\r\n            let rangeCenter = [center[0] * this.wheelPow, center[1] * this.wheelPow]\r\n            let rangePoints = [\r\n                [point1[0], point1[1]],\r\n                [point2[0], point2[1]],\r\n                [point3[0], point3[1]],\r\n                [point4[0], point4[1]]\r\n            ]\r\n            //首先判断shape属于哪个canvas\r\n            let drawCanvas = [];\r\n            for (let row = 0; row < this.canvasSplit.row; row++) {\r\n                let rowList = this.canvasList[row];\r\n                for (let col = 0; col < this.canvasSplit.col; col++) {\r\n                    let canvasItem = this.canvasList[row][col];\r\n                    //因为现在只有两个，所以高度是相同的，只需要判断宽度\r\n                    let s_x = canvasItem.width * col - this.errorRange;\r\n                    let e_x = canvasItem.width * (col + 1) + this.errorRange;\r\n                    let s_y = canvasItem.height * row - this.errorRange;\r\n                    let e_y = canvasItem.height * (row + 1) + this.errorRange;\r\n                    if (rangeCenter[0] >= s_x && rangeCenter[0] <= e_x && rangeCenter[1] >= s_y && rangeCenter[1] <= e_y) {\r\n                        drawCanvas.push({\r\n                            col,\r\n                            row,\r\n                            ...canvasItem\r\n                        })\r\n                        continue;\r\n                    }\r\n                    for (let k = 0; k < rangePoints.length; k++) {\r\n                        let rangePoint = rangePoints[k];\r\n                        if (rangePoint[0] >= s_x && rangePoint[0] <= e_x && rangePoint[1] >= s_y && rangePoint[1] <= e_y) {\r\n                            drawCanvas.push({\r\n                                col,\r\n                                row,\r\n                                ...canvasItem\r\n                            })\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            // 座位先一排一排的绘制\r\n            drawCanvas.forEach(canvasItem => {\r\n                canvasItem.ctx.save();\r\n                let tanr_x = rangeCenter[0] - (canvasItem.col * canvasItem.width);\r\n                let tanr_y = rangeCenter[1] - (canvasItem.row * canvasItem.height);\r\n                canvasItem.ctx.translate(tanr_x, tanr_y);\r\n                canvasItem.ctx.rotate(angle * Math.PI / 180);\r\n                canvasItem.ctx.translate(-tanr_x, -tanr_y);\r\n\r\n                // let s_x = 0,\r\n                //     e_x = 0,\r\n                //     s_y = 0,\r\n                //     e_y = 0;\r\n                // if (drawCanvas.length > 1) {\r\n                //     s_x = canvasItem.width * canvasItem.col;\r\n                //     e_x = canvasItem.width * (canvasItem.col + 1);\r\n                //     s_y = 0;\r\n                //     e_y = canvasItem.height;\r\n                // }\r\n                for (let i = 0; i < shape.cols; i++) {\r\n                    let x = point1[0] + i * (this.seatIcon.width + this.seatIcon.marginRight) * this.wheelPow;\r\n                    let real_x = x - (canvasItem.col * canvasItem.width);\r\n                    for (let j = 0; j < shape.rows; j++) {\r\n                        let y = point1[1] + j * (this.seatIcon.height + this.seatIcon.marginBottom) * this.wheelPow;\r\n                        let real_y = y - (canvasItem.row * canvasItem.height);\r\n                        // 当shape处在多个canvas上，需要判断当前seat是是否在循环到的canvas上\r\n                        // let draw = true;\r\n                        // if (drawCanvas.length > 1) {\r\n                        //     draw = false;\r\n                        //     let seatPoints = [\r\n                        //         [real_x, real_y],\r\n                        //         [real_x + this.seatIcon.realWidth, real_y],\r\n                        //         [real_x, real_y + this.seatIcon.realHeight],\r\n                        //         [real_x + this.seatIcon.realWidth, real_y + this.seatIcon.realHeight]\r\n                        //     ];\r\n                        //     for (let k = 0; k < 4; k++) {\r\n                        //         let seatPoint = seatPoints[k];\r\n                        //         // 没有在当前的canvas上，就不绘制当前seat\r\n                        //         if (seatPoint[0] >= s_x && seatPoint[0] <= e_x && seatPoint[1] >= s_y && seatPoint[1] <= e_y) {\r\n                        //             draw = true;\r\n                        //             console.log(1)\r\n                        //             break;\r\n                        //         }\r\n                        //     }\r\n                        // }\r\n                        // if (draw) {\r\n                        if (shape.seats[j][i].status == 0) {\r\n                            canvasItem.ctx.beginPath();\r\n                            canvasItem.ctx.drawImage(this.seatIcon.iconShow, real_x, real_y, this.seatIcon.width * this.wheelPow, this.seatIcon.height * this.wheelPow);\r\n                        } else if (shape.seats[j][i].status == 1) {\r\n                            canvasItem.ctx.beginPath();\r\n                            canvasItem.ctx.drawImage(this.seatIcon.iconChecked, real_x, real_y, this.seatIcon.width * this.wheelPow, this.seatIcon.height * this.wheelPow);\r\n                            canvasItem.ctx.drawImage(this.seatIcon.iconDraw, real_x, real_y, this.seatIcon.width * this.wheelPow, this.seatIcon.height * this.wheelPow);\r\n                        }\r\n                        // }\r\n                    }\r\n                }\r\n                canvasItem.ctx.restore();\r\n            })\r\n\r\n\r\n        },\r\n        drawMapSeat(list) { //绘制座位\r\n            if (this.wheelNum < this.wheelShow) return false;\r\n            list.forEach((shape, index) => {\r\n                if (shape.cols == 0 || shape.rows == 0) return false;\r\n                this.drawOneShapeSeat(shape);\r\n            })\r\n        },\r\n        shapeCheckedAction(shape, clickPoint) {\r\n            // let shape = e.target;\r\n            let name = shape.nodeName;\r\n            if (name != \"path\" && name != \"rect\" && name != \"polygon\") return false;\r\n\r\n            let shapeObj = [];\r\n            let shapeId = shape.getAttribute(\"id\");\r\n            // 获取到shapeList的所有shapeId集合\r\n            let shapeIds = this.shapeList.map(item => item.shapeId);\r\n            if (shapeIds.indexOf(shapeId) == -1) {\r\n                return false;\r\n                //id没有存在在列表中表明，还没有点击过这个shape\r\n                //获取shape在svg中的一些原始 start\r\n                let result = null;\r\n                switch (name) {\r\n                    case \"path\":\r\n                        result = TOOLS.pathDecompose([this.center.x, this.center.y], shape.getAttribute(\"d\"));\r\n                        break;\r\n                    case \"polygon\":\r\n                        result = TOOLS.polygonDecompose([this.center.x, this.center.y], shape.getAttribute(\"points\"));\r\n                        break;\r\n                    case \"rect\":\r\n                        let width = shape.getAttribute(\"width\");\r\n                        let height = shape.getAttribute(\"height\");\r\n                        let x = shape.getAttribute(\"x\");\r\n                        let y = shape.getAttribute(\"y\");\r\n                        result = TOOLS.rectDecompose([this.center.x, this.center.y], x, y, width, height);\r\n                        break;\r\n                    default:\r\n                        console.log(name);\r\n                        break;\r\n                }\r\n                //获取shape在svg中的一些原始 end\r\n                if (result == null) return false;\r\n                shapeObj = {\r\n                    ...result,\r\n                    shapeId,\r\n                    rows: 0,\r\n                    cols: 0,\r\n                    startRow: 1,\r\n                    startCol: 1,\r\n                    orderRow: 0, //横向排序方向：0：逆时针  1：反向\r\n                    orderCol: 0, //纵向排序方向：0：从里向外  1：反向\r\n                    seats: []\r\n                }\r\n                this.shapeList.push({\r\n                    ...shapeObj\r\n                });\r\n                this.toggleCheckedShapeStatus({\r\n                    ...shapeObj\r\n                }, {\r\n                    ...this.checkedShape\r\n                })\r\n                this.checkedShape = {\r\n                    ...shapeObj\r\n                };\r\n                //没有设置座位区域，需要先让用户设置区域座位信息\r\n                // this.checkedShapeShow = true;\r\n                //选中shape居中显示\r\n                this.clickToMax(shapeObj, this.wheelNum < this.wheelShow ? this.wheelShow : this.wheelNum);\r\n\r\n            } else {\r\n                let shapeIndex = shapeIds.indexOf(shapeId)\r\n                shapeObj = JSON.parse(JSON.stringify(this.shapeList[shapeIndex]))\r\n                if (shapeObj.shapeId == this.checkedShape.shapeId) {\r\n                    if (this.wheelNum < this.wheelShow) {\r\n                        //未显示座位，放大到显示座位的状态\r\n                        this.clickToMax(shapeObj, this.wheelNum < this.wheelShow ? this.wheelShow : this.wheelNum);\r\n                    } else {\r\n                        //选中的是当前checkedShape，判定为选中座位\r\n                        //如果没有返回座位下标信息，就判定为点击的shape\r\n                        let seat = this.checkOnSeat(shapeObj, clickPoint);\r\n                        if (seat.length != 0) {\r\n                            //设置单个座位的属性\r\n                            let seatInfo = shapeObj.seats[seat[0]][seat[1]];\r\n                            if (seatInfo.status == -1) {\r\n                                return false;\r\n                            } else if (seatInfo.status == 0) {\r\n                                seatInfo.status = 1;\r\n                                //添加\r\n                                //checkedSeatList如果存在就表明是取消事件\r\n                                this.checkedSeatList.push({\r\n                                    ...seatInfo\r\n                                })\r\n                            } else if (seatInfo.status == 1) {\r\n                                seatInfo.status = 0;\r\n                                //取消选中\r\n                                let seatIds = this.checkedSeatList.map(item => item.seatId);\r\n                                this.$delete(this.checkedSeatList, seatIds.indexOf(seatInfo.seatId));\r\n                            }\r\n                            this.shapeList[shapeIndex].seats[seat[0]][seat[1]].status = seatInfo.status;\r\n                            //更新单个座位的渲染状态\r\n                            this.updateShapeSeatStatus(this.shapeList[shapeIndex], [seat])\r\n                            // console.log(seatInfo.rowString, seatInfo.colString)\r\n                        }\r\n                    }\r\n\r\n                } else {\r\n                    this.clickToMax(shapeObj, this.wheelNum < this.wheelShow ? this.wheelShow : this.wheelNum);\r\n                    this.toggleCheckedShapeStatus(shapeObj, {\r\n                        ...this.checkedShape\r\n                    })\r\n                    this.checkedShape = shapeObj;\r\n                }\r\n\r\n\r\n\r\n            }\r\n        },\r\n        getDisplayAreaShapeIds() { //获取可视区域内的shapeId\r\n            if (this.wheelNum < this.wheelShow) return false;\r\n            //只查找有绘制座位shape的shapeList\r\n            //计算出当前的中心点在svg中的坐标，因为可视区域的宽高是知道的\r\n            let xMin = -this.position.left / this.wheelPow + this.center.x / 200,\r\n                xMax = (-this.position.left + this.cont.width) / this.wheelPow - this.center.x / 200,\r\n                yMin = -this.position.top / this.wheelPow + this.center.x / 200,\r\n                yMax = (-this.position.top + this.cont.height) / this.wheelPow - this.center.x / 200;\r\n            //绘制出四个顶点\r\n            // let point1 = [xMin, yMin]\r\n            // let point2 = [xMax, yMin]\r\n            // let point3 = [xMin, yMax]\r\n            // let point4 = [xMax, yMax]\r\n            // document.getElementById(\"211\").setAttribute(\"cx\", point1[0])\r\n            // document.getElementById(\"211\").setAttribute(\"cy\", point1[1])\r\n            // document.getElementById(\"212\").setAttribute(\"cx\", point2[0])\r\n            // document.getElementById(\"212\").setAttribute(\"cy\", point2[1])\r\n            // document.getElementById(\"213\").setAttribute(\"cx\", point3[0])\r\n            // document.getElementById(\"213\").setAttribute(\"cy\", point3[1])\r\n            // document.getElementById(\"214\").setAttribute(\"cx\", point4[0])\r\n            // document.getElementById(\"214\").setAttribute(\"cy\", point4[1])\r\n\r\n            //渲染列表判断\r\n            let list = [];\r\n            let renderIds = this.renderList.map(item => item.shapeId);\r\n            for (let i = 0; i < this.shapeList.length; i++) {\r\n                let shape = this.shapeList[i];\r\n                //如果已经存在，说明已经渲染过，就不需要再进行判断\r\n                if (renderIds.indexOf(shape.shapeId) != -1) continue;\r\n                //首先判断中心点是否在范围内\r\n                if (shape.cenPoint[0] < xMax && shape.cenPoint[0] > xMin && shape.cenPoint[1] < yMax && shape.cenPoint[1] > yMin) {\r\n                    list.push(shape);\r\n                    continue;\r\n                }\r\n                for (let j = 0; j < shape.pointList.length; j++) {\r\n                    let point = shape.pointList[j];\r\n                    if (point[0] < xMax && point[0] > xMin && point[1] < yMax && point[1] > yMin) {\r\n                        list.push(shape);\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n            this.renderList.push(...list);\r\n            this.drawMapSeat(list);\r\n\r\n            // 当前可是区域列表判断\r\n            let list2 = [];\r\n            for (let i = 0; i < this.shapeList.length; i++) {\r\n                let shape = this.shapeList[i];\r\n                //首先判断中心点是否在范围内\r\n                if (shape.cenPoint[0] < xMax && shape.cenPoint[0] > xMin && shape.cenPoint[1] < yMax && shape.cenPoint[1] > yMin) {\r\n                    list2.push(shape);\r\n                    continue;\r\n                }\r\n                for (let j = 0; j < shape.pointList.length; j++) {\r\n                    let point = shape.pointList[j];\r\n                    if (point[0] < xMax && point[0] > xMin && point[1] < yMax && point[1] > yMin) {\r\n                        list2.push(shape);\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n            if (!COMMON.diffObject({\r\n                    ...this.viewBoxList\r\n                }, {\r\n                    ...list2\r\n                })) this.viewBoxList = list2;\r\n        },\r\n        toggleCheckedShapeStatus(shape, originShape = false) { //选中shape显示状态切换\r\n            if (originShape && originShape.shapeId) {\r\n                if (shape.shapeId == originShape.shapeId) return false;\r\n                document.getElementById(originShape.shapeId).style.stroke = \"#333\";\r\n                document.getElementById(originShape.shapeId).style.strokeWidth = 1;\r\n            }\r\n            document.getElementById(shape.shapeId).style.strokeWidth = 6;\r\n            document.getElementById(shape.shapeId).style.stroke = \"green\";\r\n            document.getElementById(\"500\").setAttribute(\"style\", \"transform: rotate(\" + shape.angle + \"deg);transform-origin: 50% 50%;\");\r\n        },\r\n        checkedShapeSeatComfrim() { //保存设置行列\r\n            this.checkedShapeShow = false;\r\n            this.saveAction();\r\n            let shape = {\r\n                ...this.checkedShape\r\n            };\r\n            //生成座位\r\n            let seatIdStart = 0;\r\n            shape.seats = [];\r\n            /*\r\n            seatId: shape.shapeId + seatIdStart++,\r\n            status: 0,\r\n            rowString: shape.startRow + i,\r\n            colString: shape.startCol + j,\r\n            level: 0\r\n             */\r\n            //先循环行，再循环列\r\n            if (shape.orderRow == 0) { //逆时针\r\n                for (let i = 0; i < shape.rows; i++) {\r\n                    let rowList = [];\r\n                    if (shape.orderCol == 0) { //从里向外\r\n                        for (let j = 0; j < shape.cols; j++) {\r\n                            let seat = {\r\n                                seatId: shape.shapeId + seatIdStart++,\r\n                                status: 0,\r\n                                rowString: shape.startRow + i,\r\n                                colString: shape.startCol + j,\r\n                                level: 0\r\n                            }\r\n                            rowList.push(seat);\r\n                        }\r\n                    } else { //反向\r\n                        for (let j = shape.cols - 1; j > -1; j--) {\r\n                            let seat = {\r\n                                seatId: shape.shapeId + seatIdStart++,\r\n                                status: 0,\r\n                                rowString: shape.startRow + i,\r\n                                colString: shape.startCol + j,\r\n                                level: 0\r\n                            }\r\n                            rowList.push(seat);\r\n                        }\r\n                    }\r\n                    shape.seats.push(rowList)\r\n                }\r\n            } else { //顺时针\r\n                for (let i = shape.rows - 1; i > -1; i--) {\r\n                    let rowList = [];\r\n                    if (shape.orderCol == 0) { //从里向外\r\n                        for (let j = 0; j < shape.cols; j++) {\r\n                            let seat = {\r\n                                seatId: shape.shapeId + seatIdStart++,\r\n                                status: 0,\r\n                                rowString: shape.startRow + i,\r\n                                colString: shape.startCol + j,\r\n                                level: 0\r\n                            }\r\n                            rowList.push(seat);\r\n                        }\r\n                    } else { //反向\r\n                        for (let j = shape.cols - 1; j > -1; j--) {\r\n                            let seat = {\r\n                                seatId: shape.shapeId + seatIdStart++,\r\n                                status: 0,\r\n                                rowString: shape.startRow + i,\r\n                                colString: shape.startCol + j,\r\n                                level: 0\r\n                            }\r\n                            rowList.push(seat);\r\n                        }\r\n                    }\r\n                    shape.seats.push(rowList)\r\n                }\r\n            }\r\n            //把数据保存到shapeList中\r\n            let shapeId = shape.shapeId;\r\n            let shapeIds = this.shapeList.map(item => item.shapeId);\r\n            let shapeIndex = shapeIds.indexOf(shapeId);\r\n            if (shapeIndex != -1) {\r\n                this.drawOneShapeSeat({\r\n                    ...shape\r\n                }, {\r\n                    ...this.shapeList[shapeIndex]\r\n                });\r\n                this.$set(this.shapeList, shapeIndex, {\r\n                    ...shape\r\n                });\r\n            }\r\n            let renderIds = this.renderList.map(item => item.shapeId);\r\n            let renderIndex = renderIds.indexOf(shapeId);\r\n            if (renderIndex != -1) {\r\n                this.$set(this.renderList, renderIndex, {\r\n                    ...shape\r\n                });\r\n            } else {\r\n                this.renderList.push({\r\n                    ...shape\r\n                })\r\n            }\r\n            this.viewBoxList.push({\r\n                ...shape\r\n            })\r\n            document.getElementById(shape.shapeId).style.fill = \"rgba(255, 192, 203, 0.74)\";\r\n            this.saveAction();\r\n        },\r\n        checkedShapeSeatCancle() { //取消设置行列\r\n            console.log(\"checkedShapeSeatCancle..........\")\r\n            this.checkedShapeShow = false;\r\n        },\r\n        setSvgAndCanvas(val) {\r\n            // if (this.wheelNum == val) return false;\r\n            this.wheelNum = val;\r\n            this.setWidth = this.wheelNum * this.maxWidth;\r\n            this.setHeight = this.wheelNum * this.maxHeight;\r\n            //设置svg\r\n            svgDom.setAttribute(\"width\", this.setWidth)\r\n            svgDom.setAttribute(\"height\", this.setHeight)\r\n\r\n            if (this.wheelNum >= this.wheelShow) {\r\n                // //设置canvas\r\n                this.canvasList.forEach((list, idx) => {\r\n                    list.forEach(item => {\r\n                        item.width = this.setWidth / this.canvasSplit.col\r\n                        item.height = this.setHeight / this.canvasSplit.row\r\n                        item.dom.width = this.setWidth / this.canvasSplit.col\r\n                        item.dom.height = this.setHeight / this.canvasSplit.row\r\n                    })\r\n                })\r\n                this.$nextTick(() => {\r\n                    this.getDisplayAreaShapeIds()\r\n                })\r\n            }\r\n            this.renderList = []\r\n            this.viewBoxList = []\r\n            // svgWarp.style.width = this.setWidth + \"px\"\r\n            // svgWarp.style.height = this.setHeight + \"px\"\r\n        },\r\n        setCheckBox() {\r\n            //checkBox 宽高计算\r\n            this.checkBox.width = this.miniMap.width * this.wheelMin / this.wheelNum;\r\n            this.checkBox.height = this.miniMap.height * this.wheelMin / this.wheelNum;\r\n\r\n            let mouseX = 0,\r\n                mouseY = 0;\r\n            mouseX = this.cont.width / 2 - this.position.left;\r\n            mouseY = this.cont.height / 2 - this.position.top;\r\n            this.checkBox.left = mouseX / this.setWidth * this.miniMap.width - this.checkBox.width / 2;\r\n            this.checkBox.top = mouseY / this.setHeight * this.miniMap.height - this.checkBox.height / 2;\r\n        },\r\n        positionCheck(position) {\r\n            let top = this.cont.height - this.setHeight;\r\n            let left = this.cont.width - this.setWidth;\r\n            let top2 = -this.cont.height;\r\n            let left2 = -this.cont.width;\r\n            if (position.top < 0 && position.top < top) {\r\n                this.position.top = top;\r\n            } else if (position.top > 0 && position.top > top2) {\r\n                this.position.top = 0;\r\n            } else {\r\n                this.position.top = position.top;\r\n            }\r\n            if (position.left < 0 && position.left < left) {\r\n                this.position.left = left;\r\n            } else if (position.left > 0 && position.left > left2) {\r\n                this.position.left = 0;\r\n            } else {\r\n                this.position.left = position.left;\r\n            }\r\n        },\r\n        warpInit() {\r\n            contentWarp = this.$refs.content;\r\n\r\n            this.cont.width = contentWarp.clientWidth || contentWarp.offsetWidth;\r\n            // this.cont.height = (this.cont.width * center.y) / center.x;\r\n            // contentWarp.style.height = this.cont.height + 'px';\r\n            this.cont.height = contentWarp.clientHeight || contentWarp.offsetHeight;\r\n            this.cont.offsetLeft = contentWarp.offsetLeft;\r\n            this.cont.offsetTop = contentWarp.offsetTop;\r\n            this.cont.center = [this.cont.width / 2 + this.cont.offsetLeft, this.cont.height / 2 + this.cont.offsetTop];\r\n\r\n            // 缩略图数据计算\r\n            this.miniMap.width = 300;\r\n            this.miniMap.height = 300 * this.cont.height / this.cont.width;\r\n\r\n\r\n            // contentWarp.onmousedown = this.warpClick;\r\n            // contentWarp.onmouseup = this.warpDataInit;\r\n            // contentWarp.onmousemove = this.warpDrag;\r\n\r\n            if (window.navigator.userAgent.toLowerCase().indexOf('firefox') != -1) {\r\n                if (contentWarp.addEventListener) {\r\n                    contentWarp.addEventListener('DOMMouseScroll', this.warpWheel, false);\r\n                } else {\r\n                    contentWarp.attachEvent('on' + 'DOMMouseScroll', this.warpWheel);\r\n                }\r\n            } else {\r\n                if (contentWarp.addEventListener) {\r\n                    contentWarp.addEventListener('mousewheel', this.warpWheel, false);\r\n                } else {\r\n                    contentWarp.attachEvent('on' + 'mousewheel', this.warpWheel);\r\n                }\r\n            }\r\n            //鼠标移出事件\r\n            contentWarp.onmouseout = this.warpOut;\r\n            // 鼠标滑过事件，显示座位的行列信息\r\n            contentWarp.onmousemove = this.warpHover;\r\n\r\n            //点击事件和拖拽事件冲突优化\r\n            contentWarp.onmousedown = function(e) {\r\n                _this.hoverInfoInit();\r\n                //清除鼠标滑过和out事件\r\n                contentWarp.onmousemove = null;\r\n                contentWarp.onmouseout = null;\r\n                let clickX = e.clientX,\r\n                    clickY = e.clientY;\r\n                let offsetTop = svgWarp.offsetTop,\r\n                    offsetLeft = svgWarp.offsetLeft;\r\n                let isDrag = false;\r\n                let target = e.target;\r\n                contentWarp.onmousemove = function(e) {\r\n                    let left = Math.ceil(e.clientX - clickX); //偏移量\r\n                    let top = Math.ceil(e.clientY - clickY); //偏移量\r\n                    if (Math.abs(left) >= 5 && Math.abs(top) >= 5) {\r\n                        isDrag = true;\r\n                        _this.positionCheck({\r\n                            top: top + offsetTop,\r\n                            left: left + offsetLeft\r\n                        });\r\n                        _this.setCheckBox();\r\n                    }\r\n\r\n                }\r\n                contentWarp.onmouseup = function(e) {\r\n                    _this.hoverInfoInit()\r\n                    contentWarp.onmousemove = _this.warpHover;\r\n                    contentWarp.onmouseup = null;\r\n                    contentWarp.onmouseout = _this.warpOut;\r\n                    if (isDrag) {\r\n                        _this.getDisplayAreaShapeIds();\r\n                    } else {\r\n                        _this.shapeCheckedAction(target, [clickX - offsetLeft - _this.cont.offsetLeft, clickY - offsetTop - _this.cont.offsetTop])\r\n                    }\r\n                }\r\n                // contentWarp.onmouseout = function(e) {\r\n                //     _this.hoverInfoInit()\r\n                //     contentWarp.onmousemove = _this.warpHover;\r\n                //     contentWarp.onmouseup = null;\r\n                //     contentWarp.onmouseout = _this.warpOut;\r\n                //     if (isDrag) {\r\n                //         _this.getDisplayAreaShapeIds();\r\n                //     }\r\n                // }\r\n            }\r\n        },\r\n        warpOut() {\r\n            _this.hoverInfoInit()\r\n        },\r\n        warpHover(e) { //鼠标滑过事件，显示座位的行列信息\r\n            if (this.wheelNum < this.wheelShow) return false;\r\n            let shape = e.target;\r\n            let name = shape.nodeName;\r\n            if (name != \"path\" && name != \"rect\" && name != \"polygon\") return false;\r\n            //计算出鼠标的真实坐标\r\n            let clickX = e.clientX,\r\n                clickY = e.clientY;\r\n            let hoverPoint = [clickX - svgWarp.offsetLeft - _this.cont.offsetLeft, clickY - svgWarp.offsetTop - _this.cont.offsetTop];\r\n            let shapeId = shape.getAttribute(\"id\");\r\n            let shapeIds = this.viewBoxList.map(item => item.shapeId);\r\n            let shapedIdx = shapeIds.indexOf(shapeId);\r\n            if (shapedIdx != -1) {\r\n                let hoverShape = this.viewBoxList[shapedIdx];\r\n                let seat = this.checkOnSeat(hoverShape, hoverPoint);\r\n                if (seat.length == 0) {\r\n                    this.hoverInfoInit()\r\n                } else {\r\n                    let seatInfo = hoverShape.seats[seat[0]][seat[1]];\r\n                    if (seatInfo.status == -1) {\r\n                        this.hoverInfoInit()\r\n                    } else {\r\n                        this.hoverInfo.text = seatInfo.rowString + \"排 \" + seatInfo.colString + \"座\";\r\n                        this.hoverInfo.show = true;\r\n                        this.hoverInfo.top = clickY;\r\n                        this.hoverInfo.left = clickX;\r\n                    }\r\n\r\n                }\r\n            }\r\n        },\r\n        warpWheel(e) { //滚轮事件，缩放svg与画布的大小\r\n            this.hoverInfoInit()\r\n            let orgWidth = svgWarp.offsetWidth,\r\n                orgHeight = svgWarp.offsetHeight;\r\n            let orgTop = svgWarp.offsetTop,\r\n                orgLeft = svgWarp.offsetLeft;\r\n            let radio = e.wheelDelta / 12000;\r\n            if (radio < 0 && this.wheelNum > this.wheelMax / 4) {\r\n                radio = radio * 8;\r\n            } else if (radio > 0 && this.wheelNum < this.wheelMax / 4 * 3) {\r\n                radio = radio * 8;\r\n            }\r\n            let curVal = this.floatTwo(this.wheelNum + radio);\r\n            if (this.wheelNum >= this.wheelMax && curVal > this.wheelMax) return false;\r\n            if (this.wheelNum <= this.wheelMin && curVal < this.wheelMin) return false;\r\n            if (curVal >= this.wheelMax) {\r\n                curVal = this.wheelMax;\r\n            } else if (curVal <= this.wheelMin) {\r\n                curVal = this.wheelMin;\r\n            }\r\n            this.setSvgAndCanvas(curVal);\r\n            //position的left，top计算以及边缘值优化\r\n            let position = {\r\n                top: 0,\r\n                left: 0\r\n            }\r\n            if (curVal == this.wheelMin) {\r\n                position.top = 0;\r\n                position.left = 0;\r\n            } else {\r\n                let ratioT = (e.clientY - orgTop) / orgHeight,\r\n                    ratioL = (e.clientX - orgLeft) / orgWidth;\r\n                position.top = Math.ceil(e.clientY - (this.setHeight * ratioT));\r\n                position.left = Math.ceil(e.clientX - (this.setWidth * ratioL));\r\n            }\r\n            this.positionCheck(position)\r\n            this.setCheckBox();\r\n        },\r\n        hoverInfoInit() { //hovertip init\r\n            this.hoverInfo.show = false;\r\n            this.hoverInfo.top = 0;\r\n            this.hoverInfo.left = 0;\r\n            this.hoverInfo.text = '';\r\n        },\r\n        //座位信息 start\r\n        seatIconInit() { //座位图标初始化\r\n            this.seatIcon.iconShow = this.$refs.iconShow;\r\n            this.seatIcon.iconChecked = this.$refs.iconChecked;\r\n            this.seatIcon.iconDraw = this.$refs.iconDraw;\r\n        },\r\n        //座位信息 end\r\n        judgePageActive() { //判断当前页面是否是激活状态\r\n\r\n            var hidden, state, visibilityChange;\r\n            if (typeof document.hidden !== \"undefined\") {\r\n                hidden = \"hidden\";\r\n                visibilityChange = \"visibilitychange\";\r\n                state = \"visibilityState\";\r\n            } else if (typeof document.mozHidden !== \"undefined\") {\r\n                hidden = \"mozHidden\";\r\n                visibilityChange = \"mozvisibilitychange\";\r\n                state = \"mozVisibilityState\";\r\n            } else if (typeof document.msHidden !== \"undefined\") {\r\n                hidden = \"msHidden\";\r\n                visibilityChange = \"msvisibilitychange\";\r\n                state = \"msVisibilityState\";\r\n            } else if (typeof document.webkitHidden !== \"undefined\") {\r\n                hidden = \"webkitHidden\";\r\n                visibilityChange = \"webkitvisibilitychange\";\r\n                state = \"webkitVisibilityState\";\r\n            }\r\n\r\n            // 添加监听器,监听当前是否活动页面\r\n            document.addEventListener(visibilityChange, function() {\r\n                if (document[state] == \"hidden\") {\r\n                    console.log(\"hidden............\")\r\n                    let time = setTimeout(() => {\r\n                        this.pageVisible = false;\r\n                    }, 10000)\r\n                    document.title = document[state];\r\n                } else {\r\n                    console.log(\"visible............\")\r\n                    if (this.pageVisible == false) this.pageVisible = true;\r\n                }\r\n            })\r\n        },\r\n        saveAction() {\r\n            localStorage.setItem(\"shapeList\", JSON.stringify(this.shapeList));\r\n        },\r\n        //普通函数方法\r\n        floatTwo(num) { //保留两位小数\r\n            return Math.floor(num * 10000) / 10000;\r\n\r\n            // rounded = (0.5 + num) | 0;\r\n            // rounded = ~~ (0.5 + num);\r\n            // rounded = (0.5 + num) << 0;\r\n        }\r\n\r\n    }\r\n};\r\n</script>\r\n\r\n<style lang=\"scss\" scoped>\r\ninput {\r\n    border: 1px solid #ccc;\r\n}\r\ndiv {\r\n    box-sizing: border-box;\r\n}\r\n\r\n.warp {\r\n    width: 100%;\r\n    height: 100%;\r\n    position: relative;\r\n\r\n    .mini-map {\r\n        // width: 282px;\r\n        // height: 212px;\r\n        // background-image: url(\"../assets/baobao.svg\");\r\n        pointer-events: none;\r\n        background-image: url(\"../assets/test2.svg\");\r\n        background-size: contain;\r\n        background-repeat: no-repeat;\r\n        background-position: center;\r\n        position: absolute;\r\n        right: 10px;\r\n        top: 0;\r\n        background-color: #fff;\r\n        z-index: 10;\r\n        // border: 1px solid springgreen;\r\n        overflow: hidden;\r\n        background-color: rgba(66, 55, 55, 0.3);\r\n\r\n        .checkBox {\r\n            border: 1px solid red;\r\n            position: absolute;\r\n            top: -1px;\r\n            left: -1px;\r\n        }\r\n    }\r\n\r\n    .top {\r\n        height: 40px;\r\n        border-bottom: 1px solid red;\r\n        overflow: hidden;\r\n        width: 100%;\r\n        float: left;\r\n    }\r\n\r\n    .content {\r\n        height: calc(100vh - 40px);\r\n        width: 100%;\r\n        // width: calc(100vw - 600px);\r\n        overflow: hidden;\r\n        float: left;\r\n        overflow: hidden;\r\n        position: relative;\r\n        overflow: hidden;\r\n        margin: 0 auto;\r\n        // border: 1px solid #ccc;\r\n        box-sizing: border-box;\r\n\r\n        // &:after {\r\n        //     content: \"\";\r\n        //     display: block;\r\n        //     width: 10px;\r\n        //     height: 10px;\r\n        //     position: absolute;\r\n        //     top: 50%;\r\n        //     left: 50%;\r\n        //     background-color: #000;\r\n        //     margin-top: -5px;\r\n        //     margin-left: -5px;\r\n        // }\r\n\r\n        .svg-origin {\r\n            // border: 1px solid blue;\r\n            width: 100%;\r\n        }\r\n\r\n        .svg-warp {\r\n            position: absolute;\r\n            top: 0;\r\n            left: 0;\r\n            background-color: #bbbcbe;\r\n\r\n            &.showCanvas {\r\n                opacity: 0.7;\r\n                background-color: transparent;\r\n            }\r\n        }\r\n\r\n        .my-canvas {\r\n            border: 1px solid rgba(255, 192, 203, 1);\r\n            // background-color: rgba(255, 192, 203, 0.3);\r\n            // background-color: #bbbcbe;\r\n            //禁止鼠标事件\r\n            pointer-events: none;\r\n            position: absolute;\r\n            top: 0;\r\n            left: 0;\r\n\r\n            // opacity: 1;\r\n        }\r\n    }\r\n    .active-area {\r\n        // float: left;\r\n        width: 600px;\r\n        position: fixed;\r\n        top: 0;\r\n        right: 0;\r\n        width: 600px;\r\n        height: 100%;\r\n        z-index: 2;\r\n        background-color: #fff;\r\n        display: none;\r\n    }\r\n\r\n    .pop {\r\n        position: fixed;\r\n        top: 0;\r\n        left: 0;\r\n        width: 100%;\r\n        height: 100%;\r\n        background-color: rgba(66, 55, 55, 0.3);\r\n\r\n        .pop-content {\r\n            text-align: left;\r\n            position: absolute;\r\n            width: 500px;\r\n            height: 300px;\r\n            //- padding-top: 60px;\r\n            top: 50%;\r\n            left: 50%;\r\n            margin-left: -250px;\r\n            margin-top: -150px;\r\n            background-color: #fff;\r\n\r\n            h4 {\r\n                padding: 10px;\r\n            }\r\n\r\n            em.radio {\r\n                color: #bbbcbe;\r\n                margin-right: 10px;\r\n                font-style: normal;\r\n\r\n                &.checked {\r\n                    color: red;\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n.hover-info {\r\n    pointer-events: none;\r\n    padding: 12px;\r\n    background-color: rgba(0,0,0,.6);\r\n    position: fixed;\r\n    -webkit-border-radius: 3px;\r\n    -moz-border-radius: 3px;\r\n    border-radius: 3px;\r\n    pointer-events: none;\r\n    transform: translate(-50%,-140%);\r\n    span {\r\n        font-size: 12px;\r\n        color: #fff;\r\n    }\r\n    div {\r\n        width: 0;\r\n        height: 0;\r\n        border-color: rgba(0,0,0,.6) transparent transparent;\r\n        border-style: solid;\r\n        border-width: 10px 10px 0;\r\n        position: absolute;\r\n        bottom: -10px;\r\n        left: 0;\r\n        right: 0;\r\n        margin: auto;\r\n    }\r\n}\r\nbutton {\r\n    padding: 5px;\r\n    border: 1px solid #ccc;\r\n    margin-right: 5px;\r\n}\r\n</style>\r\n","import mod from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./seat_map.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./seat_map.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./seat_map.vue?vue&type=template&id=874862d2&scoped=true&lang=pug&\"\nimport script from \"./seat_map.vue?vue&type=script&lang=js&\"\nexport * from \"./seat_map.vue?vue&type=script&lang=js&\"\nimport style0 from \"./seat_map.vue?vue&type=style&index=0&id=874862d2&lang=scss&scoped=true&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"874862d2\",\n  null\n  \n)\n\nexport default component.exports","'use strict';\nvar DESCRIPTORS = require('../internals/descriptors');\nvar global = require('../internals/global');\nvar isForced = require('../internals/is-forced');\nvar redefine = require('../internals/redefine');\nvar has = require('../internals/has');\nvar classof = require('../internals/classof-raw');\nvar inheritIfRequired = require('../internals/inherit-if-required');\nvar toPrimitive = require('../internals/to-primitive');\nvar fails = require('../internals/fails');\nvar create = require('../internals/object-create');\nvar getOwnPropertyNames = require('../internals/object-get-own-property-names').f;\nvar getOwnPropertyDescriptor = require('../internals/object-get-own-property-descriptor').f;\nvar defineProperty = require('../internals/object-define-property').f;\nvar trim = require('../internals/string-trim').trim;\n\nvar NUMBER = 'Number';\nvar NativeNumber = global[NUMBER];\nvar NumberPrototype = NativeNumber.prototype;\n\n// Opera ~12 has broken Object#toString\nvar BROKEN_CLASSOF = classof(create(NumberPrototype)) == NUMBER;\n\n// `ToNumber` abstract operation\n// https://tc39.github.io/ecma262/#sec-tonumber\nvar toNumber = function (argument) {\n  var it = toPrimitive(argument, false);\n  var first, third, radix, maxCode, digits, length, index, code;\n  if (typeof it == 'string' && it.length > 2) {\n    it = trim(it);\n    first = it.charCodeAt(0);\n    if (first === 43 || first === 45) {\n      third = it.charCodeAt(2);\n      if (third === 88 || third === 120) return NaN; // Number('+0x1') should be NaN, old V8 fix\n    } else if (first === 48) {\n      switch (it.charCodeAt(1)) {\n        case 66: case 98: radix = 2; maxCode = 49; break; // fast equal of /^0b[01]+$/i\n        case 79: case 111: radix = 8; maxCode = 55; break; // fast equal of /^0o[0-7]+$/i\n        default: return +it;\n      }\n      digits = it.slice(2);\n      length = digits.length;\n      for (index = 0; index < length; index++) {\n        code = digits.charCodeAt(index);\n        // parseInt parses a string to a first unavailable symbol\n        // but ToNumber should return NaN if a string contains unavailable symbols\n        if (code < 48 || code > maxCode) return NaN;\n      } return parseInt(digits, radix);\n    }\n  } return +it;\n};\n\n// `Number` constructor\n// https://tc39.github.io/ecma262/#sec-number-constructor\nif (isForced(NUMBER, !NativeNumber(' 0o1') || !NativeNumber('0b1') || NativeNumber('+0x1'))) {\n  var NumberWrapper = function Number(value) {\n    var it = arguments.length < 1 ? 0 : value;\n    var dummy = this;\n    return dummy instanceof NumberWrapper\n      // check on 1..constructor(foo) case\n      && (BROKEN_CLASSOF ? fails(function () { NumberPrototype.valueOf.call(dummy); }) : classof(dummy) != NUMBER)\n        ? inheritIfRequired(new NativeNumber(toNumber(it)), dummy, NumberWrapper) : toNumber(it);\n  };\n  for (var keys = DESCRIPTORS ? getOwnPropertyNames(NativeNumber) : (\n    // ES3:\n    'MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY,' +\n    // ES2015 (in case, if modules with ES2015 Number statics required before):\n    'EPSILON,isFinite,isInteger,isNaN,isSafeInteger,MAX_SAFE_INTEGER,' +\n    'MIN_SAFE_INTEGER,parseFloat,parseInt,isInteger'\n  ).split(','), j = 0, key; keys.length > j; j++) {\n    if (has(NativeNumber, key = keys[j]) && !has(NumberWrapper, key)) {\n      defineProperty(NumberWrapper, key, getOwnPropertyDescriptor(NativeNumber, key));\n    }\n  }\n  NumberWrapper.prototype = NumberPrototype;\n  NumberPrototype.constructor = NumberWrapper;\n  redefine(global, NUMBER, NumberWrapper);\n}\n","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"warp\"},[_c('div',{staticStyle:{\"display\":\"none\"}},[_c('img',{ref:\"iconNone\",attrs:{\"src\":require(\"../assets/seat_icon_none.svg\"),\"alt\":\"\",\"sizes\":\"\",\"srcset\":\"\"}}),_c('img',{ref:\"iconSelected\",attrs:{\"src\":require(\"../assets/seat_icon_org.svg\"),\"alt\":\"\",\"sizes\":\"\",\"srcset\":\"\"}}),_c('img',{ref:\"iconShow\",attrs:{\"src\":require(\"../assets/seat_icon_show.svg\"),\"alt\":\"\",\"sizes\":\"\",\"srcset\":\"\",\"id\":\"500\"}})]),_c('div',{staticClass:\"top clear\"}),_c('div',{staticClass:\"bottom clear\"},[_c('div',{staticClass:\"content-warp\"},[_c('div',{ref:\"content\",staticClass:\"content\"},[_c('div',{ref:\"svgWarp\",staticClass:\"svg-warp\",domProps:{\"innerHTML\":_vm._s(_vm.svg)}})])]),_c('div',{ref:\"activeArea\",staticClass:\"active-area\"},[_c('div',{staticClass:\"active-top\",style:({height:_vm.activeTop+'px'})},[_c('p',[_vm._v(\"shapeId:\"+_vm._s(_vm.checkedShape.shapeId)+\" cols:\"+_vm._s(_vm.checkedShape.cols)+\" rows:\"+_vm._s(_vm.checkedShape.rows)+\" 横向排序方向：\"+_vm._s(_vm.checkedShape.orderRow==0?\"逆时针\":\"顺时针\")+\" 竖直排序方向：\"+_vm._s(_vm.checkedShape.orderCol==0?\"由里向外\":\"由外向里\"))]),_c('div',{staticClass:\"btns\"},[_c('button',{on:{\"click\":_vm.toChangeShapeInfo}},[_vm._v(\"修改区域座位信息\")]),_c('button',{attrs:{\"disabled\":_vm.selectedSeatList.length==0},on:{\"click\":_vm.addSeat}},[_vm._v(\"添加座位\")]),_c('button',{attrs:{\"disabled\":_vm.selectedSeatList.length==0},on:{\"click\":_vm.removeSeat}},[_vm._v(\"删除座位\")]),_c('button',{attrs:{\"disabled\":_vm.selectedSeatList.length==0},on:{\"click\":_vm.cancleSeleced}},[_vm._v(\"取消选择\")])]),_c('div',{staticClass:\"cols-span\",style:({left:_vm.activeLeft+_vm.seatCanvas.paddingLeft+_vm.seatCanvas.left+'px'}),on:{\"mouseout\":function($event){_vm.hoverPinkBox.width = 0;_vm.hoverPinkBox.height = 0;}}},_vm._l((_vm.checkedShape.cols),function(cols,idx){return _c('span',{key:idx,on:{\"click\":function($event){return _vm.checkedRowsOrCols(idx,false)},\"mouseover\":function($event){return _vm.hoverRowsOrCols(idx,false)}}},[_vm._v(_vm._s(_vm.checkedShape.startCol+idx)+\" 列\")])}),0)]),_c('div',{staticClass:\"active-left\",style:({width:_vm.activeLeft+'px',paddingTop:_vm.seatCanvas.paddingTop+'px'})},[_c('div',{staticClass:\"rows-span\",style:({top:_vm.seatCanvas.paddingTop+_vm.seatCanvas.top+'px'}),on:{\"mouseout\":function($event){_vm.hoverPinkBox.width = 0;_vm.hoverPinkBox.height = 0;}}},_vm._l((_vm.checkedShape.rows),function(rows,idx){return _c('span',{key:idx,on:{\"click\":function($event){return _vm.checkedRowsOrCols(idx,true)},\"mouseover\":function($event){return _vm.hoverRowsOrCols(idx,true)}}},[_vm._v(_vm._s(_vm.checkedShape.startRow+idx)+\" 排\")])}),0)]),_c('div',{ref:\"seatCanvasWarp\",staticClass:\"seat-canvas-warp\"},[_c('canvas',{directives:[{name:\"show\",rawName:\"v-show\",value:(_vm.checkedShape.shapeId!=null),expression:\"checkedShape.shapeId!=null\"}],ref:\"seatCanvas\",staticClass:\"seat-canvas\",attrs:{\"id\":\"seatCanvas\"}}),_c('div',{directives:[{name:\"show\",rawName:\"v-show\",value:(_vm.selectedBox.width>0&&_vm.selectedBox.height>0&&!_vm.checkedShapeShow),expression:\"selectedBox.width>0&&selectedBox.height>0&&!checkedShapeShow\"}],ref:\"selectedBox\",staticClass:\"selected-box\",style:({width:_vm.selectedBox.width+'px',height:_vm.selectedBox.height+'px',top:_vm.selectedBox.top+'px',left:_vm.selectedBox.left+'px'})},[_vm._v(\"selectedBox\")]),_c('div',{directives:[{name:\"show\",rawName:\"v-show\",value:(_vm.hoverPinkBox.width!=0),expression:\"hoverPinkBox.width!=0\"}],ref:\"hoverPinkBox\",staticClass:\"hover-box\",style:({width:_vm.hoverPinkBox.width+'px',height:_vm.hoverPinkBox.height+'px',top:_vm.hoverPinkBox.top+'px',left:_vm.hoverPinkBox.left+'px'})},[_vm._v(\"hoverPinkBox\")]),_c('div',{ref:\"onlyForAction\",staticClass:\"only-for-action\",style:({width:_vm.seatCanvas.width+'px',height:_vm.seatCanvas.height+'px'})})])])]),_c('div',{directives:[{name:\"show\",rawName:\"v-show\",value:(_vm.checkedShapeShow),expression:\"checkedShapeShow\"}],staticClass:\"pop\"},[_c('div',{staticClass:\"pop-content\"},[_c('h4',[_c('span',[_vm._v(\"行：\")]),_c('input',{directives:[{name:\"model\",rawName:\"v-model.number\",value:(_vm.checkedShapePopData.rows),expression:\"checkedShapePopData.rows\",modifiers:{\"number\":true}}],attrs:{\"type\":\"number\"},domProps:{\"value\":(_vm.checkedShapePopData.rows)},on:{\"input\":function($event){if($event.target.composing){ return; }_vm.$set(_vm.checkedShapePopData, \"rows\", _vm._n($event.target.value))},\"blur\":function($event){return _vm.$forceUpdate()}}})]),_c('h4',[_c('span',[_vm._v(\"列：\")]),_c('input',{directives:[{name:\"model\",rawName:\"v-model.number\",value:(_vm.checkedShapePopData.cols),expression:\"checkedShapePopData.cols\",modifiers:{\"number\":true}}],attrs:{\"type\":\"number\"},domProps:{\"value\":(_vm.checkedShapePopData.cols)},on:{\"input\":function($event){if($event.target.composing){ return; }_vm.$set(_vm.checkedShapePopData, \"cols\", _vm._n($event.target.value))},\"blur\":function($event){return _vm.$forceUpdate()}}})]),_c('h4',[_c('span',[_vm._v(\"排座-起始行：\")]),_c('input',{directives:[{name:\"model\",rawName:\"v-model.number\",value:(_vm.checkedShapePopData.startRow),expression:\"checkedShapePopData.startRow\",modifiers:{\"number\":true}}],attrs:{\"type\":\"number\"},domProps:{\"value\":(_vm.checkedShapePopData.startRow)},on:{\"input\":function($event){if($event.target.composing){ return; }_vm.$set(_vm.checkedShapePopData, \"startRow\", _vm._n($event.target.value))},\"blur\":function($event){return _vm.$forceUpdate()}}})]),_c('h4',[_c('span',[_vm._v(\"排座-起始列（座）：\")]),_c('input',{directives:[{name:\"model\",rawName:\"v-model.number\",value:(_vm.checkedShapePopData.startCol),expression:\"checkedShapePopData.startCol\",modifiers:{\"number\":true}}],attrs:{\"type\":\"number\"},domProps:{\"value\":(_vm.checkedShapePopData.startCol)},on:{\"input\":function($event){if($event.target.composing){ return; }_vm.$set(_vm.checkedShapePopData, \"startCol\", _vm._n($event.target.value))},\"blur\":function($event){return _vm.$forceUpdate()}}})]),_c('h4',[_c('span',[_vm._v(\"横向排序方向：\")]),_c('em',{staticClass:\"radio\",class:{'checked':_vm.checkedShapePopData.orderRow===0},on:{\"click\":function($event){_vm.checkedShapePopData.orderRow=0}}},[_vm._v(\"逆时针\")]),_c('em',{staticClass:\"radio\",class:{'checked':_vm.checkedShapePopData.orderRow===1},on:{\"click\":function($event){_vm.checkedShapePopData.orderRow=1}}},[_vm._v(\"顺时针\")])]),_c('h4',[_c('span',[_vm._v(\"竖直排序方向：\")]),_c('em',{staticClass:\"radio\",class:{'checked':_vm.checkedShapePopData.orderCol===0},on:{\"click\":function($event){_vm.checkedShapePopData.orderCol=0}}},[_vm._v(\"由里向外\")]),_c('em',{staticClass:\"radio\",class:{'checked':_vm.checkedShapePopData.orderCol===1},on:{\"click\":function($event){_vm.checkedShapePopData.orderCol=1}}},[_vm._v(\"由外向里\")])]),_c('h4',[_c('button',{on:{\"click\":_vm.checkedShapeSeatComfrim}},[_vm._v(\"确认\")]),_c('button',{on:{\"click\":_vm.checkedShapeSeatCancle}},[_vm._v(\"取消\")])])])]),_c('div',{directives:[{name:\"show\",rawName:\"v-show\",value:(_vm.hoverInfo.show),expression:\"hoverInfo.show\"}],staticClass:\"hover-info\",style:({left:_vm.hoverInfo.left+'px',top:_vm.hoverInfo.top+'px'})},[_c('span',[_vm._v(_vm._s(_vm.hoverInfo.text))]),_c('div')])])}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template lang=\"pug\">\r\n.warp\r\n\tdiv(style=\"display:none;\")\r\n\t\timg( ref=\"iconNone\" src=\"../assets/seat_icon_none.svg\" alt=\"\" sizes=\"\" srcset=\"\")\r\n\t\timg( ref=\"iconSelected\" src=\"../assets/seat_icon_org.svg\" alt=\"\" sizes=\"\" srcset=\"\")\r\n\t\timg( ref=\"iconShow\" src=\"../assets/seat_icon_show.svg\" alt=\"\" sizes=\"\" srcset=\"\" id=\"500\")\r\n\t.top.clear\r\n\t\t//- router-link(to=\"/svg_to_svg\") toMap\r\n\t\t//- button(@click=\"miniMap.show=!miniMap.show\") miniMap\r\n\t\t//button(@click=\"toMax\") toMax\r\n\t.bottom.clear\r\n\t\t.content-warp\r\n\t\t\t.content(ref=\"content\")\r\n\t\t\t\t.svg-warp(ref=\"svgWarp\" v-html=\"svg\")\r\n\t\t//- 操作区域\r\n\t\t.active-area(ref=\"activeArea\" )\r\n\t\t\t.active-top(:style=\"{height:activeTop+'px'}\")\r\n\t\t\t\tp shapeId:{{checkedShape.shapeId}}  cols:{{checkedShape.cols}}  rows:{{checkedShape.rows}} 横向排序方向：{{checkedShape.orderRow==0?\"逆时针\":\"顺时针\"}} 竖直排序方向：{{checkedShape.orderCol==0?\"由里向外\":\"由外向里\"}}\r\n\t\t\t\t.btns\r\n\t\t\t\t\tbutton(@click=\"toChangeShapeInfo\") 修改区域座位信息\r\n\t\t\t\t\tbutton(@click=\"addSeat\",:disabled=\"selectedSeatList.length==0\") 添加座位\r\n\t\t\t\t\tbutton(@click=\"removeSeat\",:disabled=\"selectedSeatList.length==0\") 删除座位\r\n\t\t\t\t\tbutton(@click=\"cancleSeleced\",:disabled=\"selectedSeatList.length==0\") 取消选择\r\n\t\t\t\t.cols-span(:style=\"{left:activeLeft+seatCanvas.paddingLeft+seatCanvas.left+'px'}\" @mouseout=\"hoverPinkBox.width = 0;hoverPinkBox.height = 0;\")\r\n\t\t\t\t\tspan(v-for=\"(cols,idx) in checkedShape.cols\",:key=\"idx\" @click=\"checkedRowsOrCols(idx,false)\"  @mouseover=\"hoverRowsOrCols(idx,false)\" ) {{checkedShape.startCol+idx}} 列\r\n\t\t\t.active-left(:style=\"{width:activeLeft+'px',paddingTop:seatCanvas.paddingTop+'px'}\")\r\n\t\t\t\t.rows-span(:style=\"{top:seatCanvas.paddingTop+seatCanvas.top+'px'}\" @mouseout=\"hoverPinkBox.width = 0;hoverPinkBox.height = 0;\")\r\n\t\t\t\t\tspan(v-for=\"(rows,idx) in checkedShape.rows\",:key=\"idx\" @click=\"checkedRowsOrCols(idx,true)\" @mouseover=\"hoverRowsOrCols(idx,true)\"  ) {{checkedShape.startRow+idx}} 排\r\n\t\t\t.seat-canvas-warp(ref=\"seatCanvasWarp\")\r\n\t\t\t\tcanvas.seat-canvas(v-show=\"checkedShape.shapeId!=null\" id=\"seatCanvas\" ref=\"seatCanvas\")\r\n\t\t\t\t.selected-box( ref=\"selectedBox\" v-show=\"selectedBox.width>0&&selectedBox.height>0&&!checkedShapeShow\" ,:style=\"{width:selectedBox.width+'px',height:selectedBox.height+'px',top:selectedBox.top+'px',left:selectedBox.left+'px'}\") selectedBox\r\n\t\t\t\t.hover-box(ref=\"hoverPinkBox\" v-show=\"hoverPinkBox.width!=0\" ,:style=\"{width:hoverPinkBox.width+'px',height:hoverPinkBox.height+'px',top:hoverPinkBox.top+'px',left:hoverPinkBox.left+'px'}\") hoverPinkBox\r\n\t\t\t\t.only-for-action(ref=\"onlyForAction\",:style=\"{width:seatCanvas.width+'px',height:seatCanvas.height+'px'}\")\r\n\t.pop(v-show=\"checkedShapeShow\")\r\n\t\t.pop-content\r\n\t\t\th4\r\n\t\t\t\tspan 行：\r\n\t\t\t\tinput(type=\"number\" v-model.number=\"checkedShapePopData.rows\")\r\n\t\t\th4\r\n\t\t\t\tspan 列：\r\n\t\t\t\tinput(type=\"number\" v-model.number=\"checkedShapePopData.cols\")\r\n\t\t\th4\r\n\t\t\t\tspan 排座-起始行：\r\n\t\t\t\tinput(type=\"number\" v-model.number=\"checkedShapePopData.startRow\")\r\n\t\t\th4\r\n\t\t\t\tspan 排座-起始列（座）：\r\n\t\t\t\tinput(type=\"number\" v-model.number=\"checkedShapePopData.startCol\")\r\n\t\t\th4\r\n\t\t\t\tspan 横向排序方向：\r\n\t\t\t\tem.radio(:class=\"{'checked':checkedShapePopData.orderRow===0}\" @click=\"checkedShapePopData.orderRow=0\") 逆时针\r\n\t\t\t\tem.radio(:class=\"{'checked':checkedShapePopData.orderRow===1}\" @click=\"checkedShapePopData.orderRow=1\") 顺时针\r\n\t\t\th4\r\n\t\t\t\tspan 竖直排序方向：\r\n\t\t\t\tem.radio(:class=\"{'checked':checkedShapePopData.orderCol===0}\" @click=\"checkedShapePopData.orderCol=0\") 由里向外\r\n\t\t\t\tem.radio(:class=\"{'checked':checkedShapePopData.orderCol===1}\" @click=\"checkedShapePopData.orderCol=1\") 由外向里\r\n\t\t\th4\r\n\t\t\t\tbutton(@click=\"checkedShapeSeatComfrim\") 确认\r\n\t\t\t\tbutton(@click=\"checkedShapeSeatCancle\") 取消\r\n\t.hover-info(v-show=\"hoverInfo.show\" :style=\"{left:hoverInfo.left+'px',top:hoverInfo.top+'px'}\")\r\n\t\tspan {{hoverInfo.text}}\r\n\t\tdiv\r\n</template>\r\n\r\n<script>\r\n// @ is an alias to /src\r\nimport TOOLS from '@/utils/tools.js'\r\nimport COMMON from '@/utils/common.js'\r\nlet _this = null,\r\n    svgWarp = null,\r\n    svgDom = null;\r\nexport default {\r\n    name: \"\",\r\n    components: {},\r\n    data() {\r\n        return {\r\n            pageVisible: true,\r\n            seatCanvasWarp: {\r\n                dom: null,\r\n                offsetLeft: 0,\r\n                offsetTop: 0\r\n            },\r\n            seatCanvas: {\r\n                dom: \"\",\r\n                ctx: null,\r\n                width: 0,\r\n                height: 0,\r\n                paddingLeft: 20,\r\n                paddingTop: 20,\r\n                seatWdith: 20,\r\n                seatHeight: 20,\r\n                seatMarginRight: 5,\r\n                seatMarginBottom: 5,\r\n                top: 0,\r\n                left: 0\r\n            },\r\n            selectCanvas: {\r\n                dom: \"\",\r\n                ctx: null\r\n            },\r\n            activeTop: 100,\r\n            activeLeft: 50,\r\n\r\n            selectedBox: {\r\n                width: 0,\r\n                height: 0,\r\n                top: 0,\r\n                left: 0\r\n            },\r\n            selectedSeatList: [],\r\n\r\n            hoverPinkBox: {\r\n                width: 0,\r\n                height: 0,\r\n                top: 0,\r\n                left: 0\r\n            },\r\n\r\n\r\n            hoverInfo: {\r\n                show: false,\r\n                text: \"\",\r\n                top: 0,\r\n                left: 0\r\n            },\r\n\r\n            center: {\r\n                find: false,\r\n                x: 0,\r\n                y: 0\r\n            },\r\n\r\n            svg: \"\",\r\n\r\n            seatIcon: { //座位图标\r\n                iconShow: \"\",\r\n                iconNone: \"\",\r\n                width: 20,\r\n                height: 20,\r\n                marginRight: 5,\r\n                marginBottom: 5\r\n            },\r\n\r\n            checkedShapeShow: false,\r\n            checkedShapePopData: {\r\n                shapeId: null,\r\n                rows: 0,\r\n                cols: 0,\r\n                startRow: 0, //排座的开始行\r\n                startCol: 0, //排座的开始列（座）\r\n                orderRow: 0, //横向排序方向：0：逆时针  1：反向\r\n                orderCol: 0 //纵向排序方向：0：从里向外  1：反向\r\n            },\r\n            checkedShape: {\r\n                shapeId: null,\r\n                rows: 0,\r\n                cols: 0,\r\n                startRow: 0, //排座的开始行\r\n                startCol: 0, //排座的开始列（座）\r\n                orderRow: 0, //横向排序方向：0：逆时针  1：反向\r\n                orderCol: 0 //纵向排序方向：0：从里向外  1：反向\r\n                // seats:[]\r\n            },\r\n            checkedShapeIdx: null,\r\n\r\n            shapeList: [\r\n                // {\r\n                //     cenPoint:[0,0],\r\n                //     angle:0,\r\n                //     shapeId:0,\r\n                //     rows:10,\r\n                //     cols:10,\r\n                //     startRow:2,//排座的开始行\r\n                //     startCol:2,//排座的开始列（座）\r\n                //     seats:[\r\n                //        [ {seatId:0,status:0,ticketLevel:0},{seatId:2,status:0,ticketLevel:0}],\r\n                //        [ {seatId:7,status:0,ticketLevel:0},{seatId:5,status:0,ticketLevel:0}],\r\n                //        [ {seatId:6,status:0,ticketLevel:0},{seatId:4,status:0,ticketLevel:0}]\r\n                //     ]\r\n                // }\r\n            ]\r\n        };\r\n    },\r\n    computed: {},\r\n    watch: {\r\n        shapeList: {\r\n            handler(newVal) {\r\n                this.saveAction()\r\n            },\r\n            deep: true\r\n        },\r\n        checkedShape: {\r\n            handler(shape, oldShape) {\r\n                if (shape.shapeId == oldShape.shapeId && shape.cols == oldShape.cols && shape.rows == oldShape.rows) return false;\r\n                if (shape.cols == 0 || shape.rows == 0) {\r\n                    this.checkedShapeShow = true;\r\n                } else {\r\n                    this.drawSeatCanvas(shape)\r\n                }\r\n            },\r\n            deep: true\r\n        }\r\n    },\r\n    created() {\r\n        _this = this;\r\n        if (localStorage.getItem(\"shapeList\")) {\r\n            this.shapeList = JSON.parse(localStorage.getItem(\"shapeList\"));\r\n        }\r\n    },\r\n    mounted() {\r\n        this.svg = _svg;\r\n        // this.svg = _svgBaobao;\r\n        //canvas init\r\n        this.seatCanvasInit()\r\n\r\n        this.$nextTick(() => {\r\n            this.svgInit();\r\n        });\r\n\r\n    },\r\n    beforeDestroy() {\r\n\r\n    },\r\n    methods: {\r\n        seatCanvasInit() {\r\n            this.seatCanvasWarp.dom = this.$refs.seatCanvasWarp;\r\n            this.seatCanvasWarp.dom.addEventListener(\"scroll\", this.seatCanvasWarpScroll)\r\n            this.seatCanvasWarp.offsetLeft = this.seatCanvasWarp.dom.offsetLeft;\r\n            this.seatCanvasWarp.offsetTop = this.seatCanvasWarp.dom.offsetTop;\r\n\r\n\r\n            this.seatCanvas.dom = this.$refs.seatCanvas;\r\n            this.seatCanvas.ctx = this.$refs.seatCanvas.getContext(\"2d\");\r\n            // this.selectCanvas.dom = this.$refs.selectCanvas;\r\n            // this.selectCanvas.ctx = this.$refs.selectCanvas.getContext(\"2d\");\r\n\r\n            this.seatCanvasBindAction()\r\n\r\n        },\r\n        seatCanvasBindAction() { //seatCanvas绑定鼠标事件\r\n            let onlyForAction = this.$refs.onlyForAction;\r\n            onlyForAction.onmousedown = function(e) { //点击\r\n                _this.selectedBox.width = 0;\r\n                _this.selectedBox.height = 0;\r\n                //鼠标坐标点\r\n                let clickX = e.clientX - _this.seatCanvasWarp.offsetLeft - _this.seatCanvas.left;\r\n                let clickY = e.clientY - _this.seatCanvasWarp.offsetTop - _this.seatCanvas.top;\r\n                let clickPoint = [clickX, clickY]\r\n                let seat_width = _this.seatCanvas.seatWdith + _this.seatCanvas.seatMarginRight;\r\n                let seat_height = _this.seatCanvas.seatHeight + _this.seatCanvas.seatMarginBottom;\r\n                let max_width = _this.checkedShape.cols * seat_width + _this.seatCanvas.paddingLeft * 2 - _this.seatCanvas.seatMarginRight;\r\n                let max_height = _this.checkedShape.rows * seat_height + _this.seatCanvas.paddingTop * 2 - _this.seatCanvas.seatMarginBottom;\r\n\r\n                onlyForAction.onmousemove = function(e) { //拖拽\r\n                    let width = e.clientX - clickX - _this.seatCanvasWarp.offsetLeft - _this.seatCanvas.left;\r\n                    let height = e.clientY - clickY - _this.seatCanvasWarp.offsetTop - _this.seatCanvas.top;\r\n                    if (clickX + width > max_width) {\r\n                        width = max_width - clickX\r\n                    }\r\n                    if (clickY + height > max_height) {\r\n                        height = max_height - clickY\r\n                    }\r\n                    if (width > 0) {\r\n                        _this.selectedBox.left = clickX;\r\n                    } else {\r\n                        _this.selectedBox.left = clickX - Math.abs(width);\r\n                    }\r\n                    if (height > 0) {\r\n                        _this.selectedBox.top = clickY;\r\n                    } else {\r\n                        _this.selectedBox.top = clickY - Math.abs(height);\r\n                    }\r\n                    clickPoint = [_this.selectedBox.left, _this.selectedBox.top]\r\n                    if (Math.abs(width) > 20 && Math.abs(height) > 20) {\r\n                        _this.selectedBox.width = Math.abs(width);\r\n                        _this.selectedBox.height = Math.abs(height);\r\n                    }\r\n\r\n                }\r\n                onlyForAction.onmouseup = function(e) { //鼠标弹起\r\n                    onlyForAction.onmousemove = null;\r\n                    onlyForAction.onmouseup = null;\r\n                    onlyForAction.onmouseout = null;\r\n                    _this.endAction(clickPoint, seat_width, seat_height)\r\n                }\r\n                onlyForAction.onmouseout = function(e) { //鼠标弹起\r\n                    onlyForAction.onmousemove = null;\r\n                    onlyForAction.onmouseup = null;\r\n                    onlyForAction.onmouseout = null;\r\n                    _this.endAction(clickPoint, seat_width, seat_height)\r\n                }\r\n            }\r\n\r\n        },\r\n        endAction(clickPoint, seat_width, seat_height) {\r\n            //点击事件\r\n            if (this.selectedBox.width == 0 && this.selectedBox.height == 0) {\r\n                let seat = []\r\n                for (let i = 0; i < this.checkedShape.cols; i++) {\r\n                    let real_x = i * seat_width + this.seatCanvas.paddingLeft;\r\n                    for (let j = 0; j < this.checkedShape.rows; j++) {\r\n                        let real_y = j * seat_height + this.seatCanvas.paddingTop;\r\n                        let seatPoint = [real_x + this.seatCanvas.seatWdith / 2, real_y + this.seatCanvas.seatHeight / 2]\r\n                        if (TOOLS.getDisance1(seatPoint, clickPoint) < this.seatCanvas.seatWdith / 2) {\r\n                            seat = [j, i];\r\n                            break;\r\n                        }\r\n                        if (seat.length != 0) break;\r\n                    }\r\n                    if (seat.length != 0) break;\r\n                }\r\n                if (seat.length == 0) return false;\r\n                let real_x = seat[1] * seat_width + this.seatCanvas.paddingLeft;\r\n                let real_y = seat[0] * seat_height + this.seatCanvas.paddingTop;\r\n                if (this.selectedSeatList.length != 0) {\r\n                    //已经有选中的了\r\n                    let hasIdx = -1;\r\n                    for (let i = 0; i < this.selectedSeatList.length; i++) {\r\n                        let selcted_seat = this.selectedSeatList[i];\r\n                        if (selcted_seat.toString() == seat.toString()) {\r\n                            hasIdx = i;\r\n                            break;\r\n                        }\r\n                    }\r\n                    if (hasIdx != -1) { //相等表明是取消操作，显示该座位本来状态\r\n                        this.seatCanvas.ctx.beginPath();\r\n                        if (this.checkedShape.seats[seat[0]][seat[1]].status == 0) {\r\n                            this.seatCanvas.ctx.drawImage(this.seatIcon.iconShow, real_x, real_y, this.seatCanvas.seatWdith, this.seatCanvas.seatHeight);\r\n                        } else if (this.checkedShape.seats[seat[0]][seat[1]].status == -1) {\r\n                            this.seatCanvas.ctx.drawImage(this.seatIcon.iconNone, real_x, real_y, this.seatCanvas.seatWdith, this.seatCanvas.seatHeight);\r\n                        }\r\n                        this.$delete(this.selectedSeatList, hasIdx);\r\n                    } else {\r\n                        //添加，选中座位\r\n                        this.seatCanvas.ctx.beginPath();\r\n                        this.seatCanvas.ctx.drawImage(this.seatIcon.iconSelected, real_x, real_y, this.seatCanvas.seatWdith, this.seatCanvas.seatHeight);\r\n                        this.selectedSeatList.push(seat);\r\n                    }\r\n                } else {\r\n                    //单个座位状态切换\r\n                    let seatPoint = [real_x + this.seatCanvas.seatWdith / 2, real_y + this.seatCanvas.seatHeight / 2]\r\n                    if (this.checkedShape.seats[seat[0]][seat[1]].status == 0) {\r\n                        this.checkedShape.seats[seat[0]][seat[1]].status = -1;\r\n                    } else {\r\n                        this.checkedShape.seats[seat[0]][seat[1]].status = 0;\r\n                    }\r\n                    this.seatCanvas.ctx.beginPath();\r\n                    if (this.checkedShape.seats[seat[0]][seat[1]].status == 0) {\r\n                        this.seatCanvas.ctx.drawImage(this.seatIcon.iconShow, real_x, real_y, this.seatCanvas.seatWdith, this.seatCanvas.seatHeight);\r\n                    } else if (this.checkedShape.seats[seat[0]][seat[1]].status == -1) {\r\n                        this.seatCanvas.ctx.drawImage(this.seatIcon.iconNone, real_x, real_y, this.seatCanvas.seatWdith, this.seatCanvas.seatHeight);\r\n                    }\r\n                    this.checkedShape = this.orderSeats({\r\n                        ...this.checkedShape\r\n                    })\r\n                    //更新数据到shapeList中\r\n                    this.$set(this.shapeList, this.checkedShapeIdx, {\r\n                        ...this.checkedShape\r\n                    })\r\n                }\r\n            } else {\r\n                //拖拽事件，判断当前选中的座位\r\n                let endPoint = [clickPoint[0] + this.selectedBox.width, clickPoint[1] + this.selectedBox.height];\r\n                let selectedList = [];\r\n                for (let i = 0; i < this.checkedShape.cols; i++) {\r\n                    let real_x = i * seat_width + this.seatCanvas.paddingLeft;\r\n                    for (let j = 0; j < this.checkedShape.rows; j++) {\r\n                        let real_y = j * seat_height + this.seatCanvas.paddingTop;\r\n                        let point1 = [real_x, real_y];\r\n                        let point2 = [real_x + this.seatCanvas.seatWdith, real_y + this.seatCanvas.seatHeight];\r\n                        if (\r\n                            point1[0] >= clickPoint[0] && point1[0] <= endPoint[0] &&\r\n                            point2[0] >= clickPoint[0] && point2[0] <= endPoint[0] &&\r\n                            point1[1] >= clickPoint[1] && point1[1] <= endPoint[1] &&\r\n                            point2[1] >= clickPoint[1] && point2[1] <= endPoint[1]\r\n                        ) {\r\n                            this.seatCanvas.ctx.beginPath();\r\n                            this.seatCanvas.ctx.drawImage(this.seatIcon.iconSelected, real_x, real_y, this.seatCanvas.seatWdith, this.seatCanvas.seatHeight);\r\n                            selectedList.push([j, i])\r\n                        }\r\n                    }\r\n                }\r\n                this.selectedSeatList.push(...selectedList);\r\n            }\r\n        },\r\n        checkedRowsOrCols(idx, type) {\r\n            // 是选择row还是col，true==row\r\n            let list = []\r\n            let seat_width = _this.seatCanvas.seatWdith + _this.seatCanvas.seatMarginRight;\r\n            let seat_height = _this.seatCanvas.seatHeight + _this.seatCanvas.seatMarginBottom;\r\n            let row = type ? idx : 0;\r\n            let col = type ? 0 : idx;\r\n            let len = type ? this.checkedShape.cols : this.checkedShape.rows;\r\n            for (let j = 0; j < len; j++) {\r\n                if (type) {\r\n                    col = j\r\n                } else {\r\n                    row = j;\r\n                }\r\n                let real_x = col * seat_height + _this.seatCanvas.paddingTop;\r\n                let real_y = row * seat_width + _this.seatCanvas.paddingLeft;\r\n                //判断是否已经在selectedSeatList存在\r\n                let has = false;\r\n                _this.seatCanvas.ctx.beginPath();\r\n                for (let i = 0; i < _this.selectedSeatList.length; i++) {\r\n                    if (_this.selectedSeatList[i].toString() == [row, col].toString()) {\r\n                        has = true;\r\n                        break;\r\n                    }\r\n                }\r\n                if (!has) {\r\n                    _this.seatCanvas.ctx.drawImage(_this.seatIcon.iconSelected, real_x, real_y, _this.seatCanvas.seatWdith, _this.seatCanvas.seatHeight);\r\n                    list.push([row, col])\r\n                }\r\n            }\r\n            this.selectedSeatList.push(...list)\r\n        },\r\n        hoverRowsOrCols(idx, type) {\r\n            let seat_width = this.seatCanvas.seatWdith + this.seatCanvas.seatMarginRight;\r\n            let seat_height = this.seatCanvas.seatHeight + this.seatCanvas.seatMarginBottom;\r\n            if (type) {\r\n                // row\r\n                this.hoverPinkBox.width = this.checkedShape.cols * seat_width + this.seatCanvas.paddingLeft * 2 - this.seatCanvas.seatMarginRight;\r\n                this.hoverPinkBox.height = this.seatCanvas.seatHeight;\r\n                this.hoverPinkBox.left = 0;\r\n                this.hoverPinkBox.top = idx * seat_height + this.seatCanvas.paddingTop;\r\n            } else {\r\n                // col\r\n                this.hoverPinkBox.width = this.seatCanvas.seatWdith;\r\n                this.hoverPinkBox.height = this.checkedShape.rows * seat_height + this.seatCanvas.paddingTop * 2 - this.seatCanvas.seatMarginBottom;\r\n                this.hoverPinkBox.left = idx * seat_width + this.seatCanvas.paddingLeft;\r\n                this.hoverPinkBox.top = 0;\r\n            }\r\n\r\n        },\r\n        cancleSeleced() {\r\n            this.drawSeatCanvas(this.checkedShape)\r\n        },\r\n        addSeat() {\r\n            let seats = [...this.checkedShape.seats]\r\n            this.selectedSeatList.forEach(seat => {\r\n                seats[seat[0]][seat[1]].status = 0\r\n            })\r\n            this.checkedShape.seats = seats\r\n            this.checkedShape = this.orderSeats({\r\n                ...this.checkedShape\r\n            })\r\n            this.drawSeatCanvas(this.checkedShape)\r\n            this.$set(this.shapeList, this.checkedShapeIdx, {\r\n                ...this.checkedShape\r\n            })\r\n        },\r\n        removeSeat() {\r\n            let seats = [...this.checkedShape.seats]\r\n            this.selectedSeatList.forEach(seat => {\r\n                seats[seat[0]][seat[1]].status = -1\r\n            })\r\n            this.checkedShape.seats = seats;\r\n            this.checkedShape = this.orderSeats({\r\n                ...this.checkedShape\r\n            })\r\n            this.drawSeatCanvas(this.checkedShape)\r\n            this.$set(this.shapeList, this.checkedShapeIdx, {\r\n                ...this.checkedShape\r\n            })\r\n        },\r\n        orderSeats(shape) { //排座\r\n            let seats = shape.seats;\r\n            let seatList = []\r\n            if (shape.orderCol == 0) { //从里向外，设置横列\r\n                let rowNum = 0\r\n                //设置横列\r\n                for (let row = 0; row < shape.rows; row++) {\r\n                    let rowList = [];\r\n                    let count = 0;\r\n                    for (let col = 0; col < shape.cols; col++) {\r\n                        if (seats[row][col].status != -1) count += 1;\r\n                    }\r\n                    if (count != 0) rowNum += 1;\r\n\r\n                    //设置纵列\r\n                    if (shape.orderRow == 0) { //逆时针，设置纵列\r\n                        let colNum = 0;\r\n                        for (let col = 0; col < shape.cols; col++) {\r\n                            let seatInfo = seats[row][col];\r\n                            seatInfo.rowString = shape.orderRow + rowNum\r\n                            if (seatInfo.status != -1) {\r\n                                colNum += 1;\r\n                                seatInfo.colString = shape.orderCol + colNum\r\n                            } else {\r\n                                seatInfo.colString = \"-1\"\r\n                            }\r\n                        }\r\n                    } else if (shape.orderRow == 1) { //顺势针，设置纵列\r\n                        let colNum = -1;\r\n                        for (let col = shape.cols - 1; col > -1; col--) {\r\n                            let seatInfo = seats[row][col];\r\n                            seatInfo.rowString = shape.orderRow + rowNum\r\n                            if (seatInfo.status != -1) {\r\n                                colNum += 1;\r\n                                seatInfo.colString = shape.orderCol + colNum\r\n                            } else {\r\n                                seatInfo.colString = \"-1\"\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n\r\n            } else if (shape.orderCol == 1) { //从外向里，设置横列\r\n                let rowNum = -1\r\n                //设置横列\r\n                for (let row = shape.rows - 1; row > -1; row--) {\r\n                    let rowList = [];\r\n                    let count = 0;\r\n                    for (let col = 0; col < shape.cols; col++) {\r\n                        if (seats[row][col].status != -1) count += 1;\r\n                    }\r\n                    if (count != 0) rowNum += 1;\r\n\r\n                    //设置纵列\r\n                    if (shape.orderRow == 0) { //逆时针，设置纵列\r\n                        let colNum = 0;\r\n                        for (let col = 0; col < shape.cols; col++) {\r\n                            let seatInfo = seats[row][col];\r\n                            seatInfo.rowString = shape.orderRow + rowNum\r\n                            if (seatInfo.status != -1) {\r\n                                colNum += 1;\r\n                                seatInfo.colString = shape.orderCol + colNum\r\n                            } else {\r\n                                seatInfo.colString = \"-1\"\r\n                            }\r\n                        }\r\n                    } else if (shape.orderRow == 1) { //顺势针，设置纵列\r\n                        let colNum = -1;\r\n                        for (let col = shape.cols - 1; col > -1; col--) {\r\n                            let seatInfo = seats[row][col];\r\n                            seatInfo.rowString = shape.orderRow + rowNum\r\n                            if (seatInfo.status != -1) {\r\n                                colNum += 1;\r\n                                seatInfo.colString = shape.orderCol + colNum\r\n                            } else {\r\n                                seatInfo.colString = \"-1\"\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            return shape;\r\n        },\r\n        drawSeatCanvas(shape) {\r\n            this.selectedBox = {\r\n                width: 0,\r\n                height: 0,\r\n                top: 0,\r\n                left: 0\r\n            };\r\n            this.selectedSeatList = [];\r\n            this.seatCanvas.ctx.clearRect(0, 0, this.seatCanvas.width, this.seatCanvas.height);\r\n            // this.selectCanvas.ctx.clearRect(0, 0, this.seatCanvas.width, this.seatCanvas.height);\r\n\r\n            let seat_width = this.seatCanvas.seatWdith + this.seatCanvas.seatMarginRight;\r\n            let seat_height = this.seatCanvas.seatHeight + this.seatCanvas.seatMarginBottom;\r\n            this.seatCanvas.width = shape.cols * seat_width + this.seatCanvas.paddingLeft * 2 - this.seatCanvas.seatMarginRight;\r\n            this.seatCanvas.height = shape.rows * seat_height + this.seatCanvas.paddingTop * 2 - this.seatCanvas.seatMarginBottom;\r\n            this.seatCanvas.dom.width = this.seatCanvas.width;\r\n            this.seatCanvas.dom.height = this.seatCanvas.height;\r\n\r\n            // this.selectCanvas.dom.width = this.seatCanvas.width;\r\n            // this.selectCanvas.dom.height = this.seatCanvas.height;\r\n\r\n            //绘制中线\r\n            // 垂直线\r\n            this.seatCanvas.ctx.strokeStyle = 'green';\r\n            this.seatCanvas.ctx.lineWidth = 2;\r\n            this.seatCanvas.ctx.beginPath();\r\n            this.seatCanvas.ctx.moveTo(this.seatCanvas.width / 2, 0);\r\n            this.seatCanvas.ctx.lineTo(this.seatCanvas.width / 2, this.seatCanvas.height);\r\n            this.seatCanvas.ctx.setLineDash([8, 10]);\r\n            this.seatCanvas.ctx.lineCap = \"round\";\r\n            this.seatCanvas.ctx.stroke();\r\n            this.seatCanvas.ctx.closePath();\r\n            //水平线\r\n            this.seatCanvas.ctx.beginPath();\r\n            this.seatCanvas.ctx.moveTo(0, this.seatCanvas.height / 2);\r\n            this.seatCanvas.ctx.lineTo(this.seatCanvas.width, this.seatCanvas.height / 2);\r\n            this.seatCanvas.ctx.stroke();\r\n            this.seatCanvas.ctx.closePath();\r\n\r\n            this.$nextTick(() => {\r\n                for (let i = 0; i < shape.cols; i++) {\r\n                    let real_x = i * seat_width + this.seatCanvas.paddingLeft\r\n                    for (let j = 0; j < shape.rows; j++) {\r\n                        let real_y = j * seat_height + this.seatCanvas.paddingTop;\r\n                        this.seatCanvas.ctx.beginPath();\r\n                        if (shape.seats[j][i].status == 0) {\r\n                            this.seatCanvas.ctx.drawImage(this.seatIcon.iconShow, real_x, real_y, this.seatCanvas.seatWdith, this.seatCanvas.seatHeight);\r\n                        } else if (shape.seats[j][i].status == -1) {\r\n                            this.seatCanvas.ctx.drawImage(this.seatIcon.iconNone, real_x, real_y, this.seatCanvas.seatWdith, this.seatCanvas.seatHeight);\r\n                        }\r\n                    }\r\n                }\r\n            })\r\n        },\r\n        seatCanvasWarpScroll() {\r\n            let top = this.$refs.seatCanvasWarp.scrollTop;\r\n            let left = this.$refs.seatCanvasWarp.scrollLeft;\r\n            this.seatCanvas.left = -left;\r\n            this.seatCanvas.top = -top;\r\n        },\r\n        seatCanvasClick(e) {\r\n            //鼠标坐标点\r\n            let clickX = e.clientX - this.seatCanvasWarp.offsetLeft - this.seatCanvas.left;\r\n            let clickY = e.clientY - this.seatCanvasWarp.offsetTop - this.seatCanvas.top;\r\n            let clickPoint = [clickX, clickY]\r\n            let seat_width = this.seatCanvas.seatWdith + this.seatCanvas.seatMarginRight;\r\n            let seat_height = this.seatCanvas.seatHeight + this.seatCanvas.seatMarginBottom;\r\n            // let shape = this.checkedShape\r\n            let seat = []\r\n            for (let i = 0; i < this.checkedShape.cols; i++) {\r\n                let real_x = i * seat_width + this.seatCanvas.paddingLeft;\r\n                for (let j = 0; j < this.checkedShape.rows; j++) {\r\n                    let real_y = j * seat_height + this.seatCanvas.paddingTop;\r\n                    let seatPoint = [real_x + this.seatCanvas.seatWdith / 2, real_y + this.seatCanvas.seatHeight / 2]\r\n                    if (TOOLS.getDisance1(seatPoint, clickPoint) < this.seatCanvas.seatWdith / 2) {\r\n                        seat = [j, i];\r\n                        if (this.checkedShape.seats[j][i].status == 0) {\r\n                            this.checkedShape.seats[j][i].status = -1;\r\n                        } else {\r\n                            this.checkedShape.seats[j][i].status = 0;\r\n                        }\r\n                        this.seatCanvas.ctx.beginPath();\r\n                        if (this.checkedShape.seats[j][i].status == 0) {\r\n                            this.seatCanvas.ctx.drawImage(this.seatIcon.iconShow, real_x, real_y, this.seatCanvas.seatWdith, this.seatCanvas.seatHeight);\r\n                        } else if (this.checkedShape.seats[j][i].status == -1) {\r\n                            this.seatCanvas.ctx.drawImage(this.seatIcon.iconNone, real_x, real_y, this.seatCanvas.seatWdith, this.seatCanvas.seatHeight);\r\n                        }\r\n                        //更新数据到shapeList中\r\n                        this.shapeList[this.checkedShapeIdx].seats[j][i].status = this.checkedShape.seats[j][i].status;\r\n                        break;\r\n                    }\r\n                    if (seat.length != 0) break;\r\n                }\r\n            }\r\n        },\r\n        svgInit() {\r\n            svgWarp = this.$refs.svgWarp;\r\n            svgDom = svgWarp.firstElementChild;\r\n            // 获取到shapeList的所有shapeId集合\r\n            let shapeIds = this.shapeList.map(item => item.shapeId);\r\n            // console.log(shapeIds)\r\n            //给元素设定id\r\n            let domList = svgDom.childNodes;\r\n            let id_num = 0;\r\n            domList.forEach(item => {\r\n                /* 元素节点\t1,属性节点\t2,文本节点\t3,注释节点（comment）\t8,document\t9,DocumentFragment\t11 */\r\n                if (item.nodeType == 1 && item.nodeName != \"text\" && item.nodeName != \"title\") {\r\n                    let curId = ++id_num;\r\n                    item.setAttribute(\"id\", curId);\r\n                    let findIdx = shapeIds.indexOf(curId + \"\");\r\n                    if (findIdx != -1) {\r\n                        if (this.shapeList[findIdx].rows > 0 && this.shapeList[findIdx].cols > 0) {\r\n                            item.style.fill = \"rgba(255, 192, 203, 0.74)\";\r\n                        }\r\n                    }\r\n                }\r\n            })\r\n\r\n            let viewBox = svgDom.getAttribute(\"viewBox\").split(\" \")\r\n            this.center = {\r\n                find: true,\r\n                x: parseFloat(viewBox[2]) / 2,\r\n                y: parseFloat(viewBox[3]) / 2\r\n            }\r\n            let conWidth = this.$refs.content.clientWidth,\r\n                conHeight = this.$refs.content.clientHeight;\r\n            svgDom.setAttribute(\"width\", conWidth)\r\n            svgDom.setAttribute(\"height\", conHeight)\r\n            //给shape绑定选中事件\r\n            svgDom.addEventListener(\"click\", _this.shapeCheckedAction)\r\n\r\n            //座位图标初始化\r\n            this.seatIconInit()\r\n        },\r\n        shapeCheckedAction(e) {\r\n            let shape = e.target;\r\n            let name = shape.nodeName;\r\n            if (name != \"path\" && name != \"rect\" && name != \"polygon\") return false;\r\n\r\n            let shapeObj = [];\r\n            let shapeId = shape.getAttribute(\"id\");\r\n            // 获取到shapeList的所有shapeId集合\r\n            let shapeIds = this.shapeList.map(item => item.shapeId);\r\n            if (shapeIds.indexOf(shapeId) == -1) {\r\n                // shape.style.fill = \"rgba(255, 192, 203, 0.74)\";\r\n                //id没有存在在列表中表明，还没有点击过这个shape\r\n                //获取shape在svg中的一些原始 start\r\n                let result = null;\r\n                switch (name) {\r\n                    case \"path\":\r\n                        result = TOOLS.pathDecompose([this.center.x, this.center.y], shape.getAttribute(\"d\"));\r\n                        break;\r\n                    case \"polygon\":\r\n                        result = TOOLS.polygonDecompose([this.center.x, this.center.y], shape.getAttribute(\"points\"));\r\n                        break;\r\n                    case \"rect\":\r\n                        let width = shape.getAttribute(\"width\");\r\n                        let height = shape.getAttribute(\"height\");\r\n                        let x = shape.getAttribute(\"x\");\r\n                        let y = shape.getAttribute(\"y\");\r\n                        result = TOOLS.rectDecompose([this.center.x, this.center.y], x, y, width, height);\r\n                        break;\r\n                    default:\r\n                        console.log(name);\r\n                        break;\r\n                }\r\n                //获取shape在svg中的一些原始 end\r\n                if (result == null) return false;\r\n                shapeObj = {\r\n                    ...result,\r\n                    shapeId,\r\n                    rows: 0,\r\n                    cols: 0,\r\n                    startRow: 1,\r\n                    startCol: 1,\r\n                    orderRow: 0, //横向排序方向：0：逆时针  1：反向\r\n                    orderCol: 0, //纵向排序方向：0：从里向外  1：反向\r\n                    seats: []\r\n                }\r\n                // this.shapeList.push({\r\n                //     ...shapeObj\r\n                // });\r\n                // this.checkedShapeIdx = this.shapeList.length;\r\n                this.toggleCheckedShapeStatus({\r\n                    ...shapeObj\r\n                }, {\r\n                    ...this.checkedShape\r\n                })\r\n                this.checkedShapeShow = true;\r\n                this.checkedShapePopData = {\r\n                    ...shapeObj\r\n                };\r\n                //没有设置座位区域，需要先让用户设置区域座位信息\r\n\r\n\r\n            } else {\r\n                let shapeIndex = shapeIds.indexOf(shapeId)\r\n                shapeObj = JSON.parse(JSON.stringify(this.shapeList[shapeIndex]))\r\n\r\n\r\n                //没有设置座位区域，需要先让用户设置区域座位信息\r\n                if (this.checkedShape.shapeId != shapeObj.shapeId) {\r\n                    this.toggleCheckedShapeStatus(shapeObj, {\r\n                        ...this.checkedShape\r\n                    })\r\n                    this.checkedShape = shapeObj;\r\n                    let shapeIds = this.shapeList.map(item => item.shapeId);\r\n                    this.checkedShapeIdx = shapeIds.indexOf(shapeId);\r\n                    return false;\r\n                }\r\n\r\n            }\r\n        },\r\n        toggleCheckedShapeStatus(shape = false, originShape = false) { //选中shape显示状态切换\r\n            if (originShape && originShape.shapeId) {\r\n                if (shape.shapeId == originShape.shapeId) return false;\r\n                document.getElementById(originShape.shapeId).style.stroke = \"#333\";\r\n                document.getElementById(originShape.shapeId).style.strokeWidth = 1;\r\n            }\r\n            if (shape) {\r\n                document.getElementById(shape.shapeId).style.strokeWidth = 16;\r\n                document.getElementById(shape.shapeId).style.stroke = \"green\";\r\n                document.getElementById(\"500\").setAttribute(\"style\", \"transform: rotate(\" + shape.angle + \"deg);transform-origin: 50% 50%;\");\r\n            }\r\n        },\r\n        checkedShapeSeatComfrim() { //保存设置行列\r\n            if (this.checkedShapePopData.cols < 1 || this.checkedShapePopData.rows < 1) {\r\n                alert(\"行和列必须都大于0\")\r\n                return false;\r\n            }\r\n            this.checkedShapeShow = false;\r\n            let shape = {\r\n                ...this.checkedShapePopData\r\n            };\r\n            let seatList = []\r\n            //生成座位\r\n            let seatIdStart = 0;\r\n            let seat = {\r\n                seatId: \"\",\r\n                status: 0,\r\n                rowString: \"\",\r\n                colString: \"\",\r\n                level: 0\r\n            }\r\n            //先循环行，再循环列\r\n            for (let row = 0; row < shape.rows; row++) {\r\n                let rowList = [];\r\n                for (let col = 0; col < shape.cols; col++) {\r\n                    seat.seatId = shapeId + (seatIdStart++)\r\n                    seat.colString = shape.orderCol + col;\r\n                    rowList.push({\r\n                        ...seat\r\n                    })\r\n                }\r\n                seatList.push(rowList)\r\n            }\r\n\r\n            shape.seats = seatList;\r\n            //排坐好之后再赋值\r\n            shape = this.orderSeats({\r\n                ...shape\r\n            })\r\n            // if (shape.orderRow == 0) { //逆时针\r\n            //     for (let i = 0; i < shape.rows; i++) {\r\n            //         let rowList = [];\r\n            //         if (shape.orderCol == 0) { //从里向外\r\n            //             for (let j = 0; j < shape.cols; j++) {\r\n            //                 let seat = {\r\n            //                     seatId: shape.shapeId + \"_\" + seatIdStart++,\r\n            //                     status: 0,\r\n            //                     rowString: shape.startRow + i,\r\n            //                     colString: shape.startCol + j,\r\n            //                     level: 0\r\n            //                 }\r\n            //                 rowList.push(seat);\r\n            //             }\r\n            //         } else { //反向\r\n            //             for (let j = shape.cols - 1; j > -1; j--) {\r\n            //                 let seat = {\r\n            //                     seatId: shape.shapeId + \"_\" + seatIdStart++,\r\n            //                     status: 0,\r\n            //                     rowString: shape.startRow + i,\r\n            //                     colString: shape.startCol + j,\r\n            //                     level: 0\r\n            //                 }\r\n            //                 rowList.push(seat);\r\n            //             }\r\n            //         }\r\n            //         shape.seats.push(rowList)\r\n            //     }\r\n            // } else { //顺时针\r\n            //     for (let i = shape.rows - 1; i > -1; i--) {\r\n            //         let rowList = [];\r\n            //         if (shape.orderCol == 0) { //从里向外\r\n            //             for (let j = 0; j < shape.cols; j++) {\r\n            //                 let seat = {\r\n            //                     seatId: shape.shapeId + \"_\" + seatIdStart++,\r\n            //                     status: 0,\r\n            //                     rowString: shape.startRow + i,\r\n            //                     colString: shape.startCol + j,\r\n            //                     level: 0\r\n            //                 }\r\n            //                 rowList.push(seat);\r\n            //             }\r\n            //         } else { //反向\r\n            //             for (let j = shape.cols - 1; j > -1; j--) {\r\n            //                 let seat = {\r\n            //                     seatId: shape.shapeId + \"_\" + seatIdStart++,\r\n            //                     status: 0,\r\n            //                     rowString: shape.startRow + i,\r\n            //                     colString: shape.startCol + j,\r\n            //                     level: 0\r\n            //                 }\r\n            //                 rowList.push(seat);\r\n            //             }\r\n            //         }\r\n            //         shape.seats.push(rowList)\r\n            //     }\r\n            // }\r\n            //把数据保存到shapeList中\r\n            let shapeId = shape.shapeId;\r\n            let shapeIds = this.shapeList.map(item => item.shapeId);\r\n            let shapeIndex = shapeIds.indexOf(shapeId);\r\n            if (shapeIndex != -1) {\r\n                this.$set(this.shapeList, shapeIndex, {\r\n                    ...shape\r\n                });\r\n            } else {\r\n                //说明是第一次保存\r\n                this.shapeList.push({\r\n                    ...shape\r\n                })\r\n                document.getElementById(shapeId).style.fill = \"rgba(255, 192, 203, 0.74)\";\r\n            }\r\n            this.checkedShape = {\r\n                ...shape\r\n            }\r\n\r\n        },\r\n        toChangeShapeInfo() {\r\n            if (this.checkedShape.shapeId == null) {\r\n                alert(\"请先选择shape\")\r\n            } else {\r\n                this.checkedShapeShow = true\r\n                this.checkedShapePopData = {\r\n                    ...this.checkedShape\r\n                };\r\n            }\r\n        },\r\n        checkedShapeSeatCancle() { //取消设置行列\r\n            this.checkedShapeShow = false;\r\n            this.toggleCheckedShapeStatus(this.checkedShape.shapeId == null ? false : this.checkedShape, {\r\n                ...this.checkedShapePopData\r\n            })\r\n        },\r\n        //座位信息 start\r\n        seatIconInit() { //座位图标初始化\r\n            this.seatIcon.iconShow = this.$refs.iconShow;\r\n            this.seatIcon.iconNone = this.$refs.iconNone;\r\n            this.seatIcon.iconSelected = this.$refs.iconSelected;\r\n        },\r\n        //座位信息 end\r\n        saveAction() {\r\n            localStorage.setItem(\"shapeList\", JSON.stringify(this.shapeList));\r\n        },\r\n        //普通函数方法\r\n        floatTwo(num) { //保留两位小数\r\n            return Math.floor(num * 10000) / 10000;\r\n\r\n            // rounded = (0.5 + num) | 0;\r\n            // rounded = ~~ (0.5 + num);\r\n            // rounded = (0.5 + num) << 0;\r\n        }\r\n\r\n    }\r\n};\r\n</script>\r\n\r\n<style lang=\"scss\" scoped>\r\ndiv {\r\n    box-sizing: border-box;\r\n}\r\n\r\n.warp {\r\n    width: 100%;\r\n    height: 100%;\r\n    position: relative;\r\n\r\n    .mini-map {\r\n        // width: 282px;\r\n        // height: 212px;\r\n        // background-image: url(\"../assets/baobao.svg\");\r\n        pointer-events: none;\r\n        background-image: url(\"../assets/test2.svg\");\r\n        background-size: contain;\r\n        background-repeat: no-repeat;\r\n        background-position: center;\r\n        position: absolute;\r\n        right: 10px;\r\n        top: 0;\r\n        background-color: #fff;\r\n        z-index: 10;\r\n        // border: 1px solid springgreen;\r\n        overflow: hidden;\r\n        background-color: rgba(66, 55, 55, 0.3);\r\n\r\n        .checkBox {\r\n            border: 1px solid red;\r\n            position: absolute;\r\n            top: -1px;\r\n            left: -1px;\r\n        }\r\n    }\r\n\r\n    .top {\r\n        height: 40px;\r\n        border-bottom: 1px solid red;\r\n        overflow: hidden;\r\n        width: 100%;\r\n    }\r\n    .bottom {\r\n        width: 100%;\r\n        height: calc(100% - 40px);\r\n        overflow: hidden;\r\n    }\r\n    .content {\r\n        height: 400px;\r\n        max-height: 100%;\r\n        width: 100%;\r\n        overflow: auto;\r\n        position: relative;\r\n        top: 50%;\r\n        transform: translateY(-50%);\r\n        margin: 0 auto;\r\n        box-sizing: border-box;\r\n        .svg-warp {\r\n            // position: absolute;\r\n            // top: 0;\r\n            // left: 0;\r\n            background-color: #bbbcbe;\r\n\r\n            &.showCanvas {\r\n                opacity: 0.7;\r\n                background-color: transparent;\r\n            }\r\n        }\r\n\r\n        .my-canvas {\r\n            border: 1px solid rgba(255, 192, 203, 1);\r\n            // background-color: rgba(255, 192, 203, 0.3);\r\n            // background-color: #bbbcbe;\r\n            //禁止鼠标事件\r\n            pointer-events: none;\r\n            position: absolute;\r\n            top: 0;\r\n            left: 0;\r\n\r\n            // opacity: 1;\r\n        }\r\n    }\r\n    .content-warp {\r\n        height: 100%;\r\n        width: 700px;\r\n        float: left;\r\n    }\r\n    .active-area {\r\n        width: calc(100% - 700px);\r\n\r\n        border-left: 1px solid #ccc;\r\n\r\n        float: left;\r\n        // position: fixed;\r\n        // top: 0;\r\n        // right: 0;\r\n        // width: 600px;\r\n        height: 100%;\r\n        z-index: 2;\r\n        // background-color: #ccc;\r\n        // display: none;\r\n\r\n        .active-top {\r\n            border-bottom: 1px solid #ccc;\r\n            position: relative;\r\n            overflow: hidden;\r\n            .cols-span {\r\n                position: absolute;\r\n                bottom: 0;\r\n                height: 35px;\r\n                vertical-align: bottom;\r\n                overflow: hidden;\r\n                cursor: pointer;\r\n                span {\r\n                    display: block;\r\n                    width: 20px;\r\n                    margin-right: 5px;\r\n                    height: 100%;\r\n                    overflow: hidden;\r\n                    text-align: center;\r\n                    float: left;\r\n                    &:hover {\r\n                        background-color: pink;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        .active-left {\r\n            height: calc(100% - 100px);\r\n            float: left;\r\n            border-right: 1px solid #ccc;\r\n            position: relative;\r\n            overflow: hidden;\r\n\r\n            .rows-span {\r\n                overflow: hidden;\r\n                cursor: pointer;\r\n                position: absolute;\r\n                left: 0;\r\n                width: 100%;\r\n                span {\r\n                    display: inline-block;\r\n                    width: 100%;\r\n                    text-align: right;\r\n                    height: 20px;\r\n                    margin-bottom: 5px;\r\n                    &:hover {\r\n                        background-color: pink;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        .seat-canvas-warp {\r\n            overflow: auto;\r\n            min-height: calc(100% - 100px);\r\n            min-width: calc(100% - 100px);\r\n            position: relative;\r\n            .seat-canvas {\r\n                z-index: 2;\r\n                background:: rgba(204, 204, 204, 0.5);\r\n            }\r\n            .selected-box {\r\n                position: absolute;\r\n                top: 0;\r\n                left: 0;\r\n                border: 2px dashed red;\r\n                z-index: 2;\r\n            }\r\n            .hover-box {\r\n                position: absolute;\r\n                top: 0;\r\n                left: 0;\r\n                background-color: pink;\r\n            }\r\n            .only-for-action {\r\n                position: absolute;\r\n                top: 0;\r\n                left: 0;\r\n                z-index: 3;\r\n            }\r\n        }\r\n\r\n        canvas {\r\n            float: left;\r\n            // margin: 0 auto;\r\n            position: absolute;\r\n            top: 0;\r\n            left: 0;\r\n        }\r\n\r\n    }\r\n\r\n    .pop {\r\n        z-index: 10;\r\n        position: fixed;\r\n        top: 0;\r\n        left: 0;\r\n        width: 100%;\r\n        height: 100%;\r\n        background-color: rgba(66, 55, 55, 0.3);\r\n\r\n        .pop-content {\r\n            text-align: left;\r\n            position: absolute;\r\n            width: 500px;\r\n            height: 300px;\r\n            //- padding-top: 60px;\r\n            top: 50%;\r\n            left: 50%;\r\n            margin-left: -250px;\r\n            margin-top: -150px;\r\n            background-color: #fff;\r\n\r\n            h4 {\r\n                padding: 10px;\r\n            }\r\n\r\n            em.radio {\r\n                color: #bbbcbe;\r\n                margin-right: 10px;\r\n                font-style: normal;\r\n\r\n                &.checked {\r\n                    color: red;\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n.hover-info {\r\n    padding: 12px;\r\n    background-color: rgba(0,0,0,.6);\r\n    position: absolute;\r\n    -webkit-border-radius: 3px;\r\n    -moz-border-radius: 3px;\r\n    border-radius: 3px;\r\n    pointer-events: none;\r\n    transform: translate(-50%,-140%);\r\n    span {\r\n        font-size: 12px;\r\n        color: #fff;\r\n    }\r\n    div {\r\n        width: 0;\r\n        height: 0;\r\n        border-color: rgba(0,0,0,.6) transparent transparent;\r\n        border-style: solid;\r\n        border-width: 10px 10px 0;\r\n        position: absolute;\r\n        bottom: -10px;\r\n        left: 0;\r\n        right: 0;\r\n        margin: auto;\r\n    }\r\n}\r\nbutton {\r\n    padding: 5px;\r\n}\r\n</style>\r\n","import mod from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./seat_seat.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./seat_seat.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./seat_seat.vue?vue&type=template&id=38a8790c&scoped=true&lang=pug&\"\nimport script from \"./seat_seat.vue?vue&type=script&lang=js&\"\nexport * from \"./seat_seat.vue?vue&type=script&lang=js&\"\nimport style0 from \"./seat_seat.vue?vue&type=style&index=0&id=38a8790c&lang=scss&scoped=true&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"38a8790c\",\n  null\n  \n)\n\nexport default component.exports","module.exports = __webpack_public_path__ + \"img/seat_icon_checked.71869d11.svg\";"],"sourceRoot":""}