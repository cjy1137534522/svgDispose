{"version":3,"sources":["webpack:///./src/views/page_2.vue?7408","webpack:///src/views/page_2.vue","webpack:///./src/views/page_2.vue?87ad","webpack:///./src/views/page_2.vue","webpack:///./src/assets/3.png"],"names":["render","_vm","this","_h","$createElement","_c","_self","attrs","ref","staticStyle","_v","staticRenderFns","component","module","exports"],"mappings":"uHAAA,IAAIA,EAAS,WAAa,IAAIC,EAAIC,KAASC,EAAGF,EAAIG,eAAmBC,EAAGJ,EAAIK,MAAMD,IAAIF,EAAG,OAAOE,EAAG,MAAM,CAACE,MAAM,CAAC,GAAK,WAAW,CAACF,EAAG,MAAM,CAACG,IAAI,QAAQC,YAAY,CAAC,QAAU,QAAQF,MAAM,CAAC,IAAM,EAAQ,WAAsBF,EAAG,SAAS,CAACG,IAAI,WAAWC,YAAY,CAAC,OAAS,qBAAqBF,MAAM,CAAC,MAAQ,MAAM,OAAS,QAAQ,CAACN,EAAIS,GAAG,0CACnVC,EAAkB,GCMtB,sBACA,mBACA,GACE,WAAF,GACE,KAFF,WAGI,MAAJ,IAEE,QALF,WAMI,EAAJ,MAEE,QARF,WASI,KAAJ,QAEE,cAXF,WAYI,EAAJ,MAEE,QAAF,CACI,KADJ,WAGM,EAAN,qCACM,EAAN,eACM,EAAN,gBACM,QAAN,uBACM,QAAN,OAEM,EAAN,cAIM,IAAN,mBACM,EAAN,kBACQ,EAAR,qBACQ,EAAR,0BAKI,YArBJ,WAsBM,KAAN,qDACQ,IAAR,wBACQ,QAAR,OACQ,QAAR,sCACQ,QAAR,WAGI,iBA7BJ,SA6BA,GACM,IAAN,IAQM,OAPN,uBACQ,EAAR,SACQ,EAAR,WACA,2BACQ,EAAR,UACQ,EAAR,WAEA,CAAQ,EAAR,EAAQ,EAAR,IAGI,gBAzCJ,WA0CM,IAAN,0BAEM,QAAN,YACM,IAAN,6BACQ,EAAR,sBACQ,EAAR,0BACQ,EAAR,0BACQ,EAAR,cAEM,EAAN,qBAGI,WAtDJ,WA4DM,IALA,IAAN,IACA,IACA,IACA,OACA,OACA,YACQ,IAAR,gBACU,EAAV,gBACU,EAAV,EACU,EAAV,IACU,EAAV,IACU,EAAV,8CACA,QACY,EAAZ,YACY,EAAZ,YACY,EAAZ,cAEY,EAAZ,UACY,EAAZ,UACY,EAAZ,WAIM,EAAN,oBACM,KAAN,aAGI,UAlFJ,WAmFM,EAAN,wBASM,IARA,IAAN,IACA,OACA,OACA,OACA,OACA,OACA,OAEA,YACQ,IAAR,gBACU,EAAV,gBACU,EAAV,EACU,EAAV,UACU,EAAV,6BACU,EAAV,YACU,EAAV,iCACU,EAAV,cACA,yBACY,EAAZ,YACY,EAAZ,SAIM,EAAN,qBAGI,SA9GJ,SA8GA,OACM,EAAN,OACM,EAAN,kBAEM,EAAN,6CACM,EAAN,aACM,EAAN,cACM,IAAN,8BACQ,EAAR,YACQ,EAAR,YACQ,EAAR,0BACQ,EAAR,YACQ,EAAR,SAEM,IAAN,+BACQ,EAAR,YACQ,EAAR,YACQ,EAAR,yBACQ,EAAR,YACQ,EAAR,SAEM,EAAN,aC1JgV,I,YCO5UC,EAAY,eACd,EACAZ,EACAW,GACA,EACA,KACA,KACA,MAIa,aAAAC,E,8BClBfC,EAAOC,QAAU,IAA0B","file":"js/chunk-d0515116.df3a4913.js","sourcesContent":["var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{attrs:{\"id\":\"page_1\"}},[_c('img',{ref:\"myImg\",staticStyle:{\"display\":\"none\"},attrs:{\"src\":require(\"../assets/3.png\")}}),_c('canvas',{ref:\"myCanvas\",staticStyle:{\"border\":\"1px solid #c3c3c3\"},attrs:{\"width\":\"500\",\"height\":\"400\"}},[_vm._v(\"抱歉！！！你当前使用的流览器不支持canvas！！！请换一个！！！\")])])}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template lang=\"pug\">\n  #page_1\n    img(ref=\"myImg\" src=\"../assets/3.png\" style=\"display:none;\")\n    canvas(ref=\"myCanvas\" width=\"500\" height=\"400\" style=\"border:1px solid #c3c3c3;\") 抱歉！！！你当前使用的流览器不支持canvas！！！请换一个！！！\n</template>\n\n<script>\nlet _this = null, ctx = null, WIDTH = 0, HEIGHT = 0,\n    pixel = null, opixel = null, edge = [];// xpixel = null,\nexport default {\n    components: {},\n    data() {\n        return {};\n    },\n    created() {\n        _this = this;\n    },\n    mounted() {\n        this.init();\n    },\n    beforeDestroy() {\n        ctx = null;\n    },\n    methods: {\n        init() {\n\n            ctx = this.$refs.myCanvas.getContext(\"2d\");\n            WIDTH = ctx.canvas.width;\n            HEIGHT = ctx.canvas.height;\n            console.log(\"ctx............\");\n            console.log(ctx);\n\n            _this.clickAction()\n\n            //画网格\n            // this.drawGrid(\"#ccc\", 50, 50);\n            let img = this.$refs.myImg;\n            img.onload = function () {\n                ctx.drawImage(img, 0, 0, WIDTH, HEIGHT);\n                pixel = (ctx.getImageData(0, 0, WIDTH, HEIGHT));\n                // _this.whiteBlack();\n            };\n        },\n        //绑定点击事件\n        clickAction() {\n            this.$refs.myCanvas.addEventListener(\"click\", (e) => {\n                let pos = _this.getEventPosition(e)\n                console.log(opixel)\n                console.log((ctx.getImageData(pos.x, pos.y, 1, 1)).data);\n                console.log(pos)\n            })\n        },\n        getEventPosition(ev) {\n            let x, y;\n            if (ev.layerX || ev.layerX == 0) {\n                x = ev.layerX;\n                y = ev.layerY;\n            } else if (ev.offsetX || ev.offsetX == 0) { // Opera\n                x = ev.offsetX;\n                y = ev.offsetY;\n            }\n            return { x: x, y: y };\n        },\n        //获取固定的区域图像数据\n        getCtxImageData() {\n            let imgData = ctx.getImageData(0, 0, WIDTH, HEIGHT);\n            // ctx.putImageData(imgData, 300, 250);\n            console.log(imgData.data);\n            for (let i = 0; i < imgData.data.length; i += 4) {\n                imgData.data[i] = 255 - imgData.data[i];//红色\n                imgData.data[i + 1] = 255 - imgData.data[i + 1];//绿色 \n                imgData.data[i + 2] = 255 - imgData.data[i + 2];//蓝色 \n                imgData.data[i + 3] = 155;//alpha 通道 (0-255; 0 是透明的，255 是完全可见的)\n            }\n            ctx.putImageData(imgData, 0, 0);\n        },\n        //黑白化\n        whiteBlack() {\n            let red = 0;\n            let green = 0;\n            let blue = 0;\n            let index = null;\n            let average = null;\n            for (let i = 0; i < HEIGHT; i++) {\n                for (let j = 0; j < WIDTH; j++) {\n                    index = (pixel.width * i + j) * 4;\n                    red = index;\n                    green = index + 1;\n                    blue = index + 2;\n                    average = Math.round((pixel.data[red] + pixel.data[green] + pixel.data[blue]) / 3);\n                    if (average >= 254) {\n                        pixel.data[red] = 255;\n                        pixel.data[green] = 255;\n                        pixel.data[blue] = 255;\n                    } else {\n                        pixel.data[red] = 0;\n                        pixel.data[green] = 0;\n                        pixel.data[blue] = 0;\n                    }\n                }\n            }\n            ctx.putImageData(pixel, 0, 0);\n            this.imageEdge()\n        },\n        //边缘化\n        imageEdge() {\n            opixel = ctx.getImageData(0, 0, WIDTH, HEIGHT);\n            let red = 0;\n            let index = null;\n            let redVal = null;\n            let prevRedVal = null;\n            let nextRedVal = null;\n            let topRedVal = null;\n            let bottomRedVal = null;\n\n            for (let i = 0; i < HEIGHT; i++) {\n                for (let j = 0; j < WIDTH; j++) {\n                    index = (pixel.width * i + j) * 4;\n                    red = index;\n                    redVal = pixel.data[red];\n                    prevRedVal = red - 4 >= 0 ? pixel.data[red - 4] : pixel.data[red];\n                    nextRedVal = pixel.data[red + 4];\n                    topRedVal = (red - WIDTH * 4) >= 0 ? pixel.data[red - WIDTH * 4] : pixel.data[red];\n                    bottomRedVal = pixel.data[red + WIDTH * 4];\n                    if (redVal != nextRedVal || redVal != topRedVal || redVal != prevRedVal || redVal != bottomRedVal) {\n                        opixel.data[red] = 255;\n                        edge.push(red);\n                    }\n                }\n            }\n            ctx.putImageData(opixel, 0, 0);\n        },\n        //画网格\n        drawGrid(color, stepx, stepy) {\n            ctx.save();\n            ctx.fillStyle = \"white\";\n            // console.log(ctx);\n            ctx.fillRect(0, 0, ctx.canvas.width, ctx.canvas.height);\n            ctx.lineWidth = 0.3;\n            ctx.strokeStyle = color;\n            for (let i = stepx; i < ctx.canvas.width; i += stepx) {\n                ctx.beginPath();\n                ctx.moveTo(i, 0);\n                ctx.lineTo(i, ctx.canvas.height);\n                ctx.closePath();\n                ctx.stroke();\n            }\n            for (let j = stepy; j < ctx.canvas.height; j += stepy) {\n                ctx.beginPath();\n                ctx.moveTo(0, j);\n                ctx.lineTo(ctx.canvas.width, j);\n                ctx.closePath();\n                ctx.stroke();\n            }\n            ctx.restore();\n        }\n    }\n};\n</script>\n\n<style>\n</style>\n","import mod from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./page_2.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./page_2.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./page_2.vue?vue&type=template&id=9ec1bd18&lang=pug&\"\nimport script from \"./page_2.vue?vue&type=script&lang=js&\"\nexport * from \"./page_2.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports","module.exports = __webpack_public_path__ + \"img/3.39bc7bd4.png\";"],"sourceRoot":""}